<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_intutils_8h_source" xml:lang="en-US">
<title>intutils.h</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/intutils.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;2025&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation</emphasis>
2 <emphasis role="comment">&#32;*&#32;All&#32;Rights&#32;Reserved.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;NOTICE:&#32;This&#32;software&#32;and&#32;all&#32;accompanying&#32;materials&#32;are&#32;the&#32;exclusive&#32;</emphasis>
5 <emphasis role="comment">&#32;*&#32;property&#32;of&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation&#32;(QRCS).</emphasis>
6 <emphasis role="comment">&#32;*&#32;The&#32;intellectual&#32;and&#32;technical&#32;concepts&#32;contained&#32;within&#32;this&#32;implementation&#32;</emphasis>
7 <emphasis role="comment">&#32;*&#32;are&#32;proprietary&#32;to&#32;QRCS&#32;and&#32;its&#32;authorized&#32;licensors&#32;and&#32;are&#32;protected&#32;under&#32;</emphasis>
8 <emphasis role="comment">&#32;*&#32;applicable&#32;U.S.&#32;and&#32;international&#32;copyright,&#32;patent,&#32;and&#32;trade&#32;secret&#32;laws.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;CRYPTOGRAPHIC&#32;STANDARDS:</emphasis>
11 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;includes&#32;implementations&#32;of&#32;cryptographic&#32;algorithms&#32;such&#32;as&#32;</emphasis>
12 <emphasis role="comment">&#32;*&#32;&#32;&#32;SHA3,&#32;AES,&#32;and&#32;others.&#32;These&#32;algorithms&#32;are&#32;public&#32;domain&#32;or&#32;standardized&#32;</emphasis>
13 <emphasis role="comment">&#32;*&#32;&#32;&#32;by&#32;organizations&#32;such&#32;as&#32;NIST&#32;and&#32;are&#32;NOT&#32;the&#32;property&#32;of&#32;QRCS.</emphasis>
14 <emphasis role="comment">&#32;*&#32;-&#32;However,&#32;all&#32;source&#32;code,&#32;optimizations,&#32;and&#32;implementations&#32;in&#32;this&#32;library&#32;</emphasis>
15 <emphasis role="comment">&#32;*&#32;&#32;&#32;are&#32;original&#32;works&#32;of&#32;QRCS&#32;and&#32;are&#32;protected&#32;under&#32;this&#32;license.</emphasis>
16 <emphasis role="comment">&#32;*</emphasis>
17 <emphasis role="comment">&#32;*&#32;RESTRICTIONS:</emphasis>
18 <emphasis role="comment">&#32;*&#32;-&#32;Redistribution,&#32;modification,&#32;or&#32;unauthorized&#32;distribution&#32;of&#32;this&#32;software,&#32;</emphasis>
19 <emphasis role="comment">&#32;*&#32;&#32;&#32;in&#32;whole&#32;or&#32;in&#32;part,&#32;is&#32;strictly&#32;prohibited.</emphasis>
20 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;is&#32;provided&#32;for&#32;non-commercial,&#32;educational,&#32;and&#32;research&#32;</emphasis>
21 <emphasis role="comment">&#32;*&#32;&#32;&#32;purposes&#32;only.&#32;Commercial&#32;use&#32;in&#32;any&#32;form&#32;is&#32;expressly&#32;forbidden.</emphasis>
22 <emphasis role="comment">&#32;*&#32;-&#32;Licensing&#32;and&#32;authorized&#32;distribution&#32;are&#32;solely&#32;at&#32;the&#32;discretion&#32;of&#32;QRCS.</emphasis>
23 <emphasis role="comment">&#32;*&#32;-&#32;Any&#32;use&#32;of&#32;this&#32;software&#32;implies&#32;acceptance&#32;of&#32;these&#32;restrictions.</emphasis>
24 <emphasis role="comment">&#32;*</emphasis>
25 <emphasis role="comment">&#32;*&#32;DISCLAIMER:</emphasis>
26 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as&#32;is,&quot;&#32;without&#32;warranty&#32;of&#32;any&#32;kind,&#32;express&#32;or&#32;</emphasis>
27 <emphasis role="comment">&#32;*&#32;implied,&#32;including&#32;but&#32;not&#32;limited&#32;to&#32;warranties&#32;of&#32;merchantability&#32;or&#32;fitness&#32;</emphasis>
28 <emphasis role="comment">&#32;*&#32;for&#32;a&#32;particular&#32;purpose.&#32;QRCS&#32;disclaims&#32;all&#32;liability&#32;for&#32;any&#32;direct,&#32;indirect,&#32;</emphasis>
29 <emphasis role="comment">&#32;*&#32;incidental,&#32;or&#32;consequential&#32;damages&#32;resulting&#32;from&#32;the&#32;use&#32;or&#32;misuse&#32;of&#32;this&#32;software.</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;FULL&#32;LICENSE:</emphasis>
32 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;subject&#32;to&#32;the&#32;**Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;</emphasis>
33 <emphasis role="comment">&#32;*&#32;Proprietary&#32;License&#32;(QRCS-PL)**.&#32;The&#32;complete&#32;license&#32;terms&#32;are&#32;included&#32;</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;the&#32;LICENSE.txt&#32;file&#32;distributed&#32;with&#32;this&#32;software.</emphasis>
35 <emphasis role="comment">&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;Written&#32;by:&#32;John&#32;G.&#32;Underhill</emphasis>
37 <emphasis role="comment">&#32;*&#32;Contact:&#32;john.underhill@protonmail.com</emphasis>
38 <emphasis role="comment">&#32;*/</emphasis>
39 
40 
41 <emphasis role="preprocessor">#ifndef&#32;QSC_INTUTILS_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_H</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&quot;intrinsics.h&quot;</emphasis>
46 
47 <emphasis role="comment">/*</emphasis>
48 <emphasis role="comment">*&#32;\file&#32;intutils.h</emphasis>
49 <emphasis role="comment">*&#32;\brief&#32;This&#32;file&#32;contains&#32;common&#32;integer&#32;functions</emphasis>
50 <emphasis role="comment">*/</emphasis>
51 
56 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_KB_SIZE&#32;1000ULL</emphasis>
57 
62 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_KIB_SIZE&#32;1024ULL</emphasis>
63 
68 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_MB_SIZE&#32;1000000ULL</emphasis>
69 
74 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_MIB_SIZE&#32;1048576ULL</emphasis>
75 
80 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_GB_SIZE&#32;1000000000ULL</emphasis>
81 
86 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_GIB_SIZE&#32;1073741824ULL</emphasis>
87 
92 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_TB_SIZE&#32;1000000000000ULL</emphasis>
93 
98 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_TIB_SIZE&#32;1099511627776ULL</emphasis>
99 
104 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_PB_SIZE&#32;1000000000000000ULL</emphasis>
105 
110 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_PIB_SIZE&#32;1125899906842624ULL</emphasis>
111 
116 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_EB_SIZE&#32;1000000000000000000ULL</emphasis>
117 
122 <emphasis role="preprocessor">#define&#32;QSC_INTUTILS_EIB_SIZE&#32;1152921504606846976ULL</emphasis>
123 
132 QSC_EXPORT_API&#32;<emphasis role="keywordtype">bool</emphasis>&#32;qsc_intutils_are_equal8(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
133 
140 QSC_EXPORT_API&#32;uint16_t&#32;qsc_intutils_be8to16(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
141 
148 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_be8to32(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
149 
156 QSC_EXPORT_API&#32;uint64_t&#32;qsc_intutils_be8to64(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
157 
164 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_be16to8(uint8_t*&#32;output,&#32;uint16_t&#32;value);
165 
172 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_be32to8(uint8_t*&#32;output,&#32;uint32_t&#32;value);
173 
180 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_be64to8(uint8_t*&#32;output,&#32;uint64_t&#32;value);
181 
188 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_be8increment(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen);
189 
196 QSC_EXPORT_API&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;qsc_intutils_bit_reverse(<emphasis role="keywordtype">size_t</emphasis>&#32;x,&#32;uint32_t&#32;bits);
197 
205 QSC_EXPORT_API&#32;uint64_t&#32;qsc_intutils_bit_reverse_u64(uint64_t&#32;x);
206 
214 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_bit_reverse_u32(uint32_t&#32;x);
215 
223 QSC_EXPORT_API&#32;uint16_t&#32;qsc_intutils_bit_reverse_u16(uint16_t&#32;x);
224 
225 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX)</emphasis><emphasis role="preprocessor"></emphasis>
233 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_bswap32(uint32_t*&#32;destination,&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t*&#32;source,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
234 
242 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_bswap64(uint64_t*&#32;destination,&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t*&#32;source,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
243 <emphasis role="preprocessor">#endif</emphasis>
244 
252 QSC_EXPORT_API&#32;<emphasis role="keywordtype">double</emphasis>&#32;qsc_intutils_calculate_exp(<emphasis role="keywordtype">double</emphasis>&#32;x);
253 
261 QSC_EXPORT_API&#32;<emphasis role="keywordtype">double</emphasis>&#32;qsc_intutils_calculate_fabs(<emphasis role="keywordtype">double</emphasis>&#32;x);
262 
270 QSC_EXPORT_API&#32;<emphasis role="keywordtype">double</emphasis>&#32;qsc_intutils_calculate_log(<emphasis role="keywordtype">double</emphasis>&#32;x);
271 
279 QSC_EXPORT_API&#32;<emphasis role="keywordtype">double</emphasis>&#32;qsc_intutils_calculate_sqrt(<emphasis role="keywordtype">double</emphasis>&#32;x);
280 
287 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_clear8(uint8_t*&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count);
288 
295 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_clear16(uint16_t*&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count);
296 
303 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_clear32(uint32_t*&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count);
304 
311 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_clear64(uint64_t*&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count);
312 
322 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_cmov(uint8_t*&#32;dest,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;source,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length,&#32;uint8_t&#32;cond);
323 
330 QSC_EXPORT_API&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;qsc_intutils_expand_mask(<emphasis role="keywordtype">size_t</emphasis>&#32;x);
331 
339 QSC_EXPORT_API&#32;<emphasis role="keywordtype">bool</emphasis>&#32;qsc_intutils_are_equal(<emphasis role="keywordtype">size_t</emphasis>&#32;x,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;y);
340 
348 QSC_EXPORT_API&#32;<emphasis role="keywordtype">bool</emphasis>&#32;qsc_intutils_is_gte(<emphasis role="keywordtype">size_t</emphasis>&#32;x,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;y);
349 
357 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_hex_to_bin(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;hexstr,&#32;uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen);
358 
366 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_bin_to_hex(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;hexstr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;inplen);
367 
374 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_le8increment(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen);
375 
376 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX)</emphasis><emphasis role="preprocessor"></emphasis>
382 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_leincrement_x128(__m128i*&#32;counter);
383 <emphasis role="preprocessor">#endif</emphasis>
384 
385 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX512)</emphasis><emphasis role="preprocessor"></emphasis>
391 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_leincrement_x512(__m512i*&#32;counter);
392 <emphasis role="preprocessor">#endif</emphasis>
393 
400 QSC_EXPORT_API&#32;uint16_t&#32;qsc_intutils_le8to16(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
401 
408 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_le8to32(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
409 
416 QSC_EXPORT_API&#32;uint64_t&#32;qsc_intutils_le8to64(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
417 
424 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_le16to8(uint8_t*&#32;output,&#32;uint16_t&#32;value);
425 
432 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_le32to8(uint8_t*&#32;output,&#32;uint32_t&#32;value);
433 
440 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_le64to8(uint8_t*&#32;output,&#32;uint64_t&#32;value);
441 
449 QSC_EXPORT_API&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;qsc_intutils_max(<emphasis role="keywordtype">size_t</emphasis>&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;b);
450 
458 QSC_EXPORT_API&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;qsc_intutils_min(<emphasis role="keywordtype">size_t</emphasis>&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;b);
459 
466 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_popcount32(uint32_t&#32;v);
467 
468 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX)</emphasis><emphasis role="preprocessor"></emphasis>
475 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_reverse_bytes_x128(<emphasis role="keyword">const</emphasis>&#32;__m128i*&#32;input,&#32;__m128i*&#32;output);
476 <emphasis role="preprocessor">#endif</emphasis>
477 
478 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX512)</emphasis><emphasis role="preprocessor"></emphasis>
485 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;qsc_intutils_reverse_bytes_x512(<emphasis role="keyword">const</emphasis>&#32;__m512i*&#32;input,&#32;__m512i*&#32;output);
486 <emphasis role="preprocessor">#endif</emphasis>
487 
495 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_rotl32(uint32_t&#32;value,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;shift);
496 
504 QSC_EXPORT_API&#32;uint64_t&#32;qsc_intutils_rotl64(uint64_t&#32;value,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;shift);
505 
513 QSC_EXPORT_API&#32;uint32_t&#32;qsc_intutils_rotr32(uint32_t&#32;value,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;shift);
514 
522 QSC_EXPORT_API&#32;uint64_t&#32;qsc_intutils_rotr64(uint64_t&#32;value,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;shift);
523 
532 QSC_EXPORT_API&#32;int32_t&#32;qsc_intutils_verify(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
533 
534 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
