<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mceliece_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/mceliece.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/mceliece.h</primary></indexterm>
<para>

<para>Contains the primary public api for the Niederreiter dual form of the McEliece asymmetric cipher implementation. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_mceliece_8h_1a73d907806bc87503e60376c0561b3ec4"/>#define <emphasis role="strong">QSC_MCELIECE_SEED_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the seed array. </para>
</listitem>
            <listitem><para><anchor xml:id="_mceliece_8h_1a9a25450a39b13893e4a22910fbe6f2b3"/>#define <emphasis role="strong">QSC_MCELIECE_SHAREDSECRET_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the shared secret-key array. </para>
</listitem>
            <listitem><para><anchor xml:id="_mceliece_8h_1a295c8443d15899b9ba45d57968db6898"/>#define <emphasis role="strong">QSC_MCELIECE_ALGNAME</emphasis>&#160;&#160;&#160;&quot;MCELIECE&quot;</para>

<para>The formal algorithm name. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API bool <link linkend="_mceliece_8h_1a01e711ff5e4aa6463567f343dc289aa4">qsc_mceliece_decapsulate</link> (uint8_t *secret, const uint8_t *ciphertext, const uint8_t *privatekey)</para>

<para>Decapsulates the shared secret for a given cipher-text using a private-key. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API bool <link linkend="_mceliece_8h_1afc1dcfa7d08600d9f08f652b1870c89f">qsc_mceliece_decrypt</link> (uint8_t *secret, const uint8_t *ciphertext, const uint8_t *privatekey)</para>

<para>Decrypts the shared secret for a given cipher-text using a private-key Used in conjunction with the encrypt function. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_mceliece_8h_1a0243223caa07b630aceafb747fd072e8">qsc_mceliece_encapsulate</link> (uint8_t *secret, uint8_t *ciphertext, const uint8_t *publickey, bool(*rng_generate)(uint8_t *, size_t))</para>

<para>Generates cipher-text and encapsulates a shared secret key using a public-key. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_mceliece_8h_1aed581a4509d43bfd08374f04ab8fc43f">qsc_mceliece_encrypt</link> (uint8_t *secret, uint8_t *ciphertext, const uint8_t *publickey, const uint8_t seed[<link linkend="_mceliece_8h_1a73d907806bc87503e60376c0561b3ec4">QSC_MCELIECE_SEED_SIZE</link>])</para>

<para>Generates cipher-text and encapsulates a shared secret key using a public-key Used in conjunction with the encrypt function. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_mceliece_8h_1a7281ad99725a38a63c880411cb707dba">qsc_mceliece_generate_keypair</link> (uint8_t *publickey, uint8_t *privatekey, bool(*rng_generate)(uint8_t *, size_t))</para>

<para>Generates public and private key for the McEliece key encapsulation mechanism. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains the primary public api for the Niederreiter dual form of the McEliece asymmetric cipher implementation. </para>

<para><formalpara>
<title>Example</title>
<para><literallayout><computeroutput>uint8_t&#32;ct[QSC_MCELIECE_CIPHERTEXT_SIZE];
uint8_t&#32;pk[QSC_MCELIECE_PUBLICKEY_SIZE];
uint8_t&#32;sk[QSC_MCELIECE_PRIVATEKEY_SIZE];
uint8_t&#32;ssa[<link linkend="_mceliece_8h_1a9a25450a39b13893e4a22910fbe6f2b3">QSC_MCELIECE_SHAREDSECRET_SIZE</link>];
uint8_t&#32;ssb[<link linkend="_mceliece_8h_1a9a25450a39b13893e4a22910fbe6f2b3">QSC_MCELIECE_SHAREDSECRET_SIZE</link>];

<emphasis role="comment">//&#32;create&#32;the&#32;public&#32;and&#32;secret&#32;keys</emphasis>
qsc_mceliece_generate_keypair(pk,&#32;sk);

<emphasis role="comment">//&#32;output&#32;the&#32;cipher-text&#32;(ct),&#32;and&#32;the&#32;shared&#32;key</emphasis>
qsc_mceliece_encapsulate(ssb,&#32;ct,&#32;pk);

<emphasis role="comment">//&#32;decrypt&#32;the&#32;cipher-text,&#32;and&#32;output&#32;the&#32;shared&#32;key</emphasis>
<emphasis role="keywordflow">if</emphasis>&#32;(qsc_mceliece_decapsulate(ssa,&#32;ct,&#32;sk)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
{
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decapsulation&#32;failed,&#32;do&#32;something..</emphasis>
}
</computeroutput></literallayout></para>
</formalpara>
<formalpara><title>Remarks</title>

<para>Classic McEliece is a KEM designed for IND-CCA2 security at a very high security level, even against quantum computers. <?linebreak?>The KEM is built conservatively from a PKE designed for OW-CPA security, namely Niederreiter&apos;s dual version of McEliece&apos;s PKE using binary Goppa codes. <?linebreak?>Every level of the construction is designed so that future cryptographic auditors can be confident in the long-term security of post-quantum public-key encryption. <?linebreak?> Based entirely on the C reference branch of Dilithium taken from the NIST Post Quantum Competition Round 3 submission. <?linebreak?>The NIST Post Quantum Competition <link xlink:href="https://csrc.nist.gov/Projects/post-quantum-cryptography/round-3-submissions">Round 3</link> Finalists. <?linebreak?>The <link xlink:href="https://classic.mceliece.org/">McEliece</link> website. <?linebreak?>The McEliece <link xlink:href="https://classic.mceliece.org/nist/mceliece-20201010.pdf">Algorithm</link> Specification. <?linebreak?>Authors: Daniel J. Bernstein, Tung Chou, Tanja Lange, and Peter Schwabe. <?linebreak?>Updated by John Underhill, June 28 2021. </para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_mceliece_8h_1a01e711ff5e4aa6463567f343dc289aa4"/><section>
    <title>qsc_mceliece_decapsulate()</title>
<indexterm><primary>qsc_mceliece_decapsulate</primary><secondary>mceliece.h</secondary></indexterm>
<indexterm><primary>mceliece.h</primary><secondary>qsc_mceliece_decapsulate</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API bool qsc_mceliece_decapsulate (uint8_t * secret, const uint8_t * ciphertext, const uint8_t * privatekey)</computeroutput></para><para>

<para>Decapsulates the shared secret for a given cipher-text using a private-key. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>secret</entry><entry>
<para>Pointer to a shared secret key, an array of QSC_MCELIECE_SHAREDSECRET_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>ciphertext</entry><entry>
<para>[const] Pointer to the cipher-text array of QSC_MCELIECE_CIPHERTEXT_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>[const] Pointer to the private-key array of QSC_MCELIECE_PRIVATEKEY_SIZE constant size </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true for success </para>
</formalpara>
</para>
</section>
<anchor xml:id="_mceliece_8h_1afc1dcfa7d08600d9f08f652b1870c89f"/><section>
    <title>qsc_mceliece_decrypt()</title>
<indexterm><primary>qsc_mceliece_decrypt</primary><secondary>mceliece.h</secondary></indexterm>
<indexterm><primary>mceliece.h</primary><secondary>qsc_mceliece_decrypt</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API bool qsc_mceliece_decrypt (uint8_t * secret, const uint8_t * ciphertext, const uint8_t * privatekey)</computeroutput></para><para>

<para>Decrypts the shared secret for a given cipher-text using a private-key Used in conjunction with the encrypt function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>secret</entry><entry>
<para>Pointer to the output shared secret key, an array of QSC_KYBER_SHAREDSECRET_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>ciphertext</entry><entry>
<para>[const] Pointer to the cipher-text array of QSC_KYBER_CIPHERTEXT_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>[const] Pointer to the secret-key array of QSC_KYBER_PRIVATEKEY_SIZE constant size </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true for success </para>
</formalpara>
</para>
</section>
<anchor xml:id="_mceliece_8h_1a0243223caa07b630aceafb747fd072e8"/><section>
    <title>qsc_mceliece_encapsulate()</title>
<indexterm><primary>qsc_mceliece_encapsulate</primary><secondary>mceliece.h</secondary></indexterm>
<indexterm><primary>mceliece.h</primary><secondary>qsc_mceliece_encapsulate</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_mceliece_encapsulate (uint8_t * secret, uint8_t * ciphertext, const uint8_t * publickey, bool(* rng_generate&#160;)(uint8_t *, size_t))</computeroutput></para><para>

<para>Generates cipher-text and encapsulates a shared secret key using a public-key. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>secret</entry><entry>
<para>Pointer to a shared secret, a uint8_t array of QSC_MCELIECE_SHAREDSECRET_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>ciphertext</entry><entry>
<para>Pointer to the cipher-text array of QSC_MCELIECE_CIPHERTEXT_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>publickey</entry><entry>
<para>[const] Pointer to the public-key array of QSC_MCELIECE_PUBLICKEY_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>rng_generate</entry><entry>
<para>Pointer to a random generator function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_mceliece_8h_1aed581a4509d43bfd08374f04ab8fc43f"/><section>
    <title>qsc_mceliece_encrypt()</title>
<indexterm><primary>qsc_mceliece_encrypt</primary><secondary>mceliece.h</secondary></indexterm>
<indexterm><primary>mceliece.h</primary><secondary>qsc_mceliece_encrypt</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_mceliece_encrypt (uint8_t * secret, uint8_t * ciphertext, const uint8_t * publickey, const uint8_t seed[QSC_MCELIECE_SEED_SIZE])</computeroutput></para><para>

<para>Generates cipher-text and encapsulates a shared secret key using a public-key Used in conjunction with the encrypt function. </para>
</para>

<para><warning><title>Warning</title>

<para>Cipher-text array must be sized to the QSC_KYBER_CIPHERTEXT_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>secret</entry><entry>
<para>Pointer to the shared secret key, a uint8_t array of QSC_KYBER_SHAREDSECRET_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>ciphertext</entry><entry>
<para>Pointer to the cipher-text array of QSC_KYBER_CIPHERTEXT_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>publickey</entry><entry>
<para>[const] Pointer to the public-key array of QSC_KYBER_PUBLICKEY_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>seed</entry><entry>
<para>[const] A pointer to the random seed array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_mceliece_8h_1a7281ad99725a38a63c880411cb707dba"/><section>
    <title>qsc_mceliece_generate_keypair()</title>
<indexterm><primary>qsc_mceliece_generate_keypair</primary><secondary>mceliece.h</secondary></indexterm>
<indexterm><primary>mceliece.h</primary><secondary>qsc_mceliece_generate_keypair</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_mceliece_generate_keypair (uint8_t * publickey, uint8_t * privatekey, bool(* rng_generate&#160;)(uint8_t *, size_t))</computeroutput></para><para>

<para>Generates public and private key for the McEliece key encapsulation mechanism. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>publickey</entry><entry>
<para>Pointer to the output public-key array of QSC_MCELIECE_PUBLICKEY_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>Pointer to output private-key array of QSC_MCELIECE_PRIVATEKEY_SIZE constant size </para>
</entry>
                            </row>
                            <row>
<entry>rng_generate</entry><entry>
<para>Pointer to the random generator function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
