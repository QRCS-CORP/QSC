<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_kyberbase__avx2_8h_source" xml:lang="en-US">
<title>kyberbase_avx2.h</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/kyberbase_avx2.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;2025&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation</emphasis>
2 <emphasis role="comment">&#32;*&#32;All&#32;Rights&#32;Reserved.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;NOTICE:&#32;This&#32;software&#32;and&#32;all&#32;accompanying&#32;materials&#32;are&#32;the&#32;exclusive&#32;</emphasis>
5 <emphasis role="comment">&#32;*&#32;property&#32;of&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation&#32;(QRCS).</emphasis>
6 <emphasis role="comment">&#32;*&#32;The&#32;intellectual&#32;and&#32;technical&#32;concepts&#32;contained&#32;within&#32;this&#32;implementation&#32;</emphasis>
7 <emphasis role="comment">&#32;*&#32;are&#32;proprietary&#32;to&#32;QRCS&#32;and&#32;its&#32;authorized&#32;licensors&#32;and&#32;are&#32;protected&#32;under&#32;</emphasis>
8 <emphasis role="comment">&#32;*&#32;applicable&#32;U.S.&#32;and&#32;international&#32;copyright,&#32;patent,&#32;and&#32;trade&#32;secret&#32;laws.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;CRYPTOGRAPHIC&#32;STANDARDS:</emphasis>
11 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;includes&#32;implementations&#32;of&#32;cryptographic&#32;algorithms&#32;such&#32;as&#32;</emphasis>
12 <emphasis role="comment">&#32;*&#32;&#32;&#32;SHA3,&#32;AES,&#32;and&#32;others.&#32;These&#32;algorithms&#32;are&#32;public&#32;domain&#32;or&#32;standardized&#32;</emphasis>
13 <emphasis role="comment">&#32;*&#32;&#32;&#32;by&#32;organizations&#32;such&#32;as&#32;NIST&#32;and&#32;are&#32;NOT&#32;the&#32;property&#32;of&#32;QRCS.</emphasis>
14 <emphasis role="comment">&#32;*&#32;-&#32;However,&#32;all&#32;source&#32;code,&#32;optimizations,&#32;and&#32;implementations&#32;in&#32;this&#32;library&#32;</emphasis>
15 <emphasis role="comment">&#32;*&#32;&#32;&#32;are&#32;original&#32;works&#32;of&#32;QRCS&#32;and&#32;are&#32;protected&#32;under&#32;this&#32;license.</emphasis>
16 <emphasis role="comment">&#32;*</emphasis>
17 <emphasis role="comment">&#32;*&#32;RESTRICTIONS:</emphasis>
18 <emphasis role="comment">&#32;*&#32;-&#32;Redistribution,&#32;modification,&#32;or&#32;unauthorized&#32;distribution&#32;of&#32;this&#32;software,&#32;</emphasis>
19 <emphasis role="comment">&#32;*&#32;&#32;&#32;in&#32;whole&#32;or&#32;in&#32;part,&#32;is&#32;strictly&#32;prohibited.</emphasis>
20 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;is&#32;provided&#32;for&#32;non-commercial,&#32;educational,&#32;and&#32;research&#32;</emphasis>
21 <emphasis role="comment">&#32;*&#32;&#32;&#32;purposes&#32;only.&#32;Commercial&#32;use&#32;in&#32;any&#32;form&#32;is&#32;expressly&#32;forbidden.</emphasis>
22 <emphasis role="comment">&#32;*&#32;-&#32;Licensing&#32;and&#32;authorized&#32;distribution&#32;are&#32;solely&#32;at&#32;the&#32;discretion&#32;of&#32;QRCS.</emphasis>
23 <emphasis role="comment">&#32;*&#32;-&#32;Any&#32;use&#32;of&#32;this&#32;software&#32;implies&#32;acceptance&#32;of&#32;these&#32;restrictions.</emphasis>
24 <emphasis role="comment">&#32;*</emphasis>
25 <emphasis role="comment">&#32;*&#32;DISCLAIMER:</emphasis>
26 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as&#32;is,&quot;&#32;without&#32;warranty&#32;of&#32;any&#32;kind,&#32;express&#32;or&#32;</emphasis>
27 <emphasis role="comment">&#32;*&#32;implied,&#32;including&#32;but&#32;not&#32;limited&#32;to&#32;warranties&#32;of&#32;merchantability&#32;or&#32;fitness&#32;</emphasis>
28 <emphasis role="comment">&#32;*&#32;for&#32;a&#32;particular&#32;purpose.&#32;QRCS&#32;disclaims&#32;all&#32;liability&#32;for&#32;any&#32;direct,&#32;indirect,&#32;</emphasis>
29 <emphasis role="comment">&#32;*&#32;incidental,&#32;or&#32;consequential&#32;damages&#32;resulting&#32;from&#32;the&#32;use&#32;or&#32;misuse&#32;of&#32;this&#32;software.</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;FULL&#32;LICENSE:</emphasis>
32 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;subject&#32;to&#32;the&#32;**Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;</emphasis>
33 <emphasis role="comment">&#32;*&#32;Proprietary&#32;License&#32;(QRCS-PL)**.&#32;The&#32;complete&#32;license&#32;terms&#32;are&#32;included&#32;</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;the&#32;LICENSE.txt&#32;file&#32;distributed&#32;with&#32;this&#32;software.</emphasis>
35 <emphasis role="comment">&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;Written&#32;by:&#32;John&#32;G.&#32;Underhill</emphasis>
37 <emphasis role="comment">&#32;*&#32;Contact:&#32;john.underhill@protonmail.com</emphasis>
38 <emphasis role="comment">&#32;*/</emphasis>
39 
40 
41 <emphasis role="preprocessor">#ifndef&#32;QSC_KYBERBASE_AVX2_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;QSC_KYBERBASE_AVX2_H</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
45 <emphasis role="comment">/*&#32;\cond&#32;DOXYGEN_IGNORE&#32;*/</emphasis>
46 
51 
52 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX2)</emphasis>
53 
58 <emphasis role="preprocessor">#if&#32;defined(QSC_KYBER_S1P1632)</emphasis>
59 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_K&#32;2</emphasis>
60 <emphasis role="preprocessor">#elif&#32;defined(QSC_KYBER_S3P2400)</emphasis>
61 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_K&#32;3</emphasis>
62 <emphasis role="preprocessor">#elif&#32;defined(QSC_KYBER_S5P3168)</emphasis>
63 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_K&#32;4</emphasis>
64 <emphasis role="preprocessor">#elif&#32;defined(QSC_KYBER_S6P3936)</emphasis>
65 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_K&#32;5</emphasis>
66 <emphasis role="preprocessor">#else</emphasis>
67 <emphasis role="preprocessor">#&#32;&#32;&#32;error&#32;&quot;The&#32;Kyber&#32;parameter&#32;set&#32;is&#32;invalid!&quot;</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
74 <emphasis role="preprocessor">#define&#32;QSC_KYBER_N&#32;256</emphasis>
75 
80 <emphasis role="preprocessor">#define&#32;QSC_KYBER_Q&#32;3329</emphasis>
81 
86 <emphasis role="preprocessor">#define&#32;QSC_KYBER_ETA2&#32;2</emphasis>
87 
92 <emphasis role="preprocessor">#define&#32;QSC_KYBER_MSGBYTES&#32;32</emphasis>
93 
98 <emphasis role="preprocessor">#define&#32;QSC_KYBER_SYMBYTES&#32;32</emphasis>
99 
104 <emphasis role="preprocessor">#define&#32;QSC_KYBER_POLYBYTES&#32;384</emphasis>
105 
106 <emphasis role="preprocessor">#if&#32;(QSC_KYBER_K&#32;==&#32;2)</emphasis>
107 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYVECBASE_BYTES&#32;320</emphasis>
108 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYCOMPRESSED_BYTES&#32;128</emphasis>
109 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_ETA1&#32;3</emphasis>
110 <emphasis role="preprocessor">#elif&#32;(QSC_KYBER_K&#32;==&#32;3)</emphasis>
111 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYVECBASE_BYTES&#32;320</emphasis>
112 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYCOMPRESSED_BYTES&#32;128</emphasis>
113 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_ETA1&#32;2</emphasis>
114 <emphasis role="preprocessor">#elif&#32;(QSC_KYBER_K&#32;==&#32;4)</emphasis>
115 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYVECBASE_BYTES&#32;352</emphasis>
116 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYCOMPRESSED_BYTES&#32;160</emphasis>
117 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_ETA1&#32;2</emphasis>
118 <emphasis role="preprocessor">#elif&#32;(QSC_KYBER_K&#32;==&#32;5)</emphasis>
119 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYVECBASE_BYTES&#32;352</emphasis>
120 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_POLYCOMPRESSED_BYTES&#32;160</emphasis>
121 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_KYBER_ETA1&#32;2</emphasis>
122 <emphasis role="preprocessor">#endif</emphasis>
123 
128 <emphasis role="preprocessor">#define&#32;QSC_KYBER_POLYVEC_COMPRESSED_BYTES&#32;(QSC_KYBER_K&#32;*&#32;QSC_KYBER_POLYVECBASE_BYTES)</emphasis>
129 
134 <emphasis role="preprocessor">#define&#32;QSC_KYBER_POLYVEC_BYTES&#32;(QSC_KYBER_K&#32;*&#32;QSC_KYBER_POLYBYTES)</emphasis>
135 
140 <emphasis role="preprocessor">#define&#32;QSC_KYBER_INDCPA_PUBLICKEY_BYTES&#32;(QSC_KYBER_POLYVEC_BYTES&#32;+&#32;QSC_KYBER_SYMBYTES)</emphasis>
141 
146 <emphasis role="preprocessor">#define&#32;QSC_KYBER_INDCPA_SECRETKEY_BYTES&#32;(QSC_KYBER_POLYVEC_BYTES)</emphasis>
147 
152 <emphasis role="preprocessor">#define&#32;QSC_KYBER_INDCPA_BYTES&#32;(QSC_KYBER_POLYVEC_COMPRESSED_BYTES&#32;+&#32;QSC_KYBER_POLYCOMPRESSED_BYTES)</emphasis>
153 
158 <emphasis role="preprocessor">#define&#32;QSC_KYBER_PUBLICKEY_BYTES&#32;&#32;(QSC_KYBER_INDCPA_PUBLICKEY_BYTES)</emphasis>
159 
164 <emphasis role="preprocessor">#define&#32;QSC_KYBER_SECRETKEY_BYTES&#32;&#32;(QSC_KYBER_INDCPA_SECRETKEY_BYTES&#32;+&#32;QSC_KYBER_INDCPA_PUBLICKEY_BYTES&#32;+&#32;2&#32;*&#32;QSC_KYBER_SYMBYTES)</emphasis>
165 
170 <emphasis role="preprocessor">#define&#32;QSC_KYBER_CIPHERTEXT_BYTES&#32;(QSC_KYBER_INDCPA_BYTES)</emphasis>
171 
172 <emphasis role="preprocessor">#if&#32;defined(QSC_GCC_ASM_ENABLED)</emphasis>
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ntt_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;invntt_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;nttpack_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
176 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;nttunpack_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;basemul_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*b,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ntttobytes_avx(uint8_t&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;nttfrombytes_avx(__m256i&#32;*r,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*a,&#32;<emphasis role="keyword">const</emphasis>&#32;__m256i&#32;*qdata);
180 &#32;&#32;&#32;&#32;int16_t&#32;reduce_avx(int16_t*&#32;r,&#32;<emphasis role="keyword">const</emphasis>&#32;int16_t*&#32;qdata);
181 &#32;&#32;&#32;&#32;int16_t&#32;csubq_avx(int16_t*&#32;r,&#32;<emphasis role="keyword">const</emphasis>&#32;int16_t*&#32;qdata);
182 &#32;&#32;&#32;&#32;int16_t&#32;tomont_avx(int16_t*&#32;r,&#32;<emphasis role="keyword">const</emphasis>&#32;int16_t*&#32;qdata);
183 
184 &#32;&#32;&#32;&#32;<emphasis role="comment">/*void&#32;ntt_avx(int16_t&#32;r[QSC_KYBER_N]);</emphasis>
185 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;invntt_avx(int16_t&#32;r[QSC_KYBER_N]);</emphasis>
186 <emphasis role="comment">&#32;&#32;&#32;&#32;extern&#32;const&#32;int16_t&#32;qdata[];</emphasis>
187 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;nttpack_avx(int16_t*&#32;r,&#32;const&#32;int16_t*&#32;qdata);;</emphasis>
188 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;nttunpack_avx(int16_t*&#32;r,&#32;const&#32;int16_t*&#32;qdata);</emphasis>
189 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;ntttobytes_avx(uint8_t*&#32;r,&#32;const&#32;int16_t*&#32;a,&#32;const&#32;int16_t*&#32;qdata);</emphasis>
190 <emphasis role="comment">&#32;&#32;&#32;&#32;void&#32;nttfrombytes_avx(int16_t*&#32;r,&#32;const&#32;uint8_t*&#32;a,&#32;const&#32;int16_t*&#32;qdata);</emphasis>
191 <emphasis role="comment">&#32;&#32;&#32;&#32;int16_t&#32;reduce_avx(int16_t*&#32;r,&#32;const&#32;int16_t*&#32;qdata);</emphasis>
192 <emphasis role="comment">&#32;&#32;&#32;&#32;int16_t&#32;csubq_avx(int16_t*&#32;r,&#32;const&#32;int16_t*&#32;qdata);</emphasis>
193 <emphasis role="comment">&#32;&#32;&#32;&#32;int16_t&#32;tomont_avx(int16_t*&#32;r,&#32;const&#32;int16_t*&#32;qdata);*/</emphasis>
194 <emphasis role="preprocessor">#endif</emphasis>
195 
196 <emphasis role="comment">/*&#32;kem.h&#32;*/</emphasis>
197 
206 <emphasis role="keywordtype">bool</emphasis>&#32;qsc_kyber_avx2_decapsulate(uint8_t&#32;ss[QSC_KYBER_MSGBYTES],&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;ct[QSC_KYBER_CIPHERTEXT_BYTES],
207 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;sk[QSC_KYBER_SECRETKEY_BYTES]);
208 
217 <emphasis role="keywordtype">void</emphasis>&#32;qsc_kyber_avx2_encapsulate(uint8_t&#32;ct[QSC_KYBER_CIPHERTEXT_BYTES],&#32;uint8_t&#32;ss[QSC_KYBER_MSGBYTES],
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;pk[QSC_KYBER_PUBLICKEY_BYTES],&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*rng_generate)(uint8_t*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
219 
227 <emphasis role="keywordtype">void</emphasis>&#32;qsc_kyber_avx2_generate_keypair(uint8_t&#32;pk[QSC_KYBER_PUBLICKEY_BYTES],&#32;uint8_t&#32;sk[QSC_KYBER_SECRETKEY_BYTES],
228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*rng_generate)(uint8_t*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
229 
230 <emphasis role="preprocessor">#endif</emphasis>
231 
232 <emphasis role="comment">/*&#32;\endcond&#32;DOXYGEN_IGNORE&#32;*/</emphasis>
233 
234 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
