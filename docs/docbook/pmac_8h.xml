<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_pmac_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/pmac.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/pmac.h</primary></indexterm>
<para>

<para>PMAC function definitions <?linebreak?>Contains the public api and documentation for the PMAC implementation. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structqsc__pmac__state">qsc_pmac_state</link></para>

<para>The pmac state. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link></para>

<para>The key parameters structure containing key and info arrays and lengths. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_pmac_8h_1a76a06bee20027b9dd557425e78390c73"/>#define <emphasis role="strong">QSC_PMAC_BLOCK_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The natural block size of the message input in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_pmac_8h_1ae860b62603abd6848bfbb3df5a1a8c0f"/>#define <emphasis role="strong">QSC_PMAC_KEY_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The PMAC key size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_pmac_8h_1ab3df44c99d5ebc7812dd76cdacf4e554"/>#define <emphasis role="strong">QSC_PMAC_MAC_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The PMAC MAC code size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_pmac_8h_1ae8418aad19cfc57f7752bf8c05aedc75"/>#define <emphasis role="strong">QSC_PMAC_NONCE_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The PMAC nonce size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_pmac_8h_1a63848dd6f98c1064f381a18393e9f162"/>#define <emphasis role="strong">QSC_PMAC_STATE_SIZE</emphasis>&#160;&#160;&#160;(<link linkend="_pmac_8h_1a76a06bee20027b9dd557425e78390c73">QSC_PMAC_BLOCK_SIZE</link> / sizeof(uint64_t))</para>

<para>The PMAC state size. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link> <link linkend="_pmac_8h_1a553d5c1aaea8706eb6a88146cdf2737f">qsc_pmac_modes</link></para>

<para>The PMAC mode types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link> { <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1a8baf5b4f47ea7d037a234507c3886fe8">qsc_pmac_mode_256</link>
, <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1a137aef295e1eed125797b204a49b6437">qsc_pmac_mode_512</link>
 }</para>

<para>The PMAC mode types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API void <link linkend="_pmac_8h_1a31301a069ce546f18ef5152e5892559b">qsc_pmac_compute</link> (uint8_t *output, <link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link> *keyparams, const uint8_t *message, size_t msglen)</para>

<para>Compute the MAC code and return the result in the mac byte array. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_pmac_8h_1ab0aee9e4aa722c7c2c1d2429c2762a68">qsc_pmac_dispose</link> (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> *ctx)</para>

<para>Reset the state values to zero. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_pmac_8h_1af1ed45d96723eb6a9ae7ad9b089f3d99">qsc_pmac_finalize</link> (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the message state and returns the MAC code. Absorb the last block of message and create the MAC array. <?linebreak?>. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_pmac_8h_1a4ff51f093813a8628459c0019fc16fa2">qsc_pmac_initialize</link> (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> *ctx, <link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link> *keyparams)</para>

<para>Initialize the state with the secret key. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_pmac_8h_1a790e4cf68b673d10a5d9453bf970de31">qsc_pmac_update</link> (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update the pmac generator with a single block of message input. Absorbs block sized lengths of input message into the state. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>PMAC function definitions <?linebreak?>Contains the public api and documentation for the PMAC implementation. </para>

<para><warning><title>Warning</title>

<para>If the key is re-used, the nonce must be unique to every same-key session. Just as with GMAC, the nonce must not be re-used, this is unsupported, and can seriously compromise the security of the MAC function. If the key is ephemeral, and only used once for a single session, no nonce is required, and (NULL, 0) can be passed for the nonce and nonce size in the keyparams structure. If the key is to be re-used, the nonce paramater must be implemented, and the nonce must be incremented with every use of the same key. In the case of re-initializing the cipher using a cached key, the implementation can pass the cipher nonce into the MAC function as the nonce parameter.</para>
</warning>
PMAC Examples <?linebreak?><literallayout><computeroutput>uint8_t&#32;key[<link linkend="_pmac_8h_1ae860b62603abd6848bfbb3df5a1a8c0f">QSC_PMAC_KEY_SIZE</link>]&#32;=&#32;{&#32;...&#32;};
uint8_t&#32;mac[<link linkend="_pmac_8h_1ab3df44c99d5ebc7812dd76cdacf4e554">QSC_PMAC_MAC_SIZE</link>]&#32;=&#32;{&#32;0&#32;};
uint8_t&#32;nonce[32]&#32;=&#32;{&#32;...&#32;};
uint8_t&#32;msg[64]&#32;=&#32;{&#32;...&#32;};

<link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link>&#32;kp&#32;=&#32;{&#32;key,&#32;<link linkend="_pmac_8h_1ae860b62603abd6848bfbb3df5a1a8c0f">QSC_PMAC_KEY_SIZE</link>,&#32;nonce,&#32;32,&#32;NULL,&#32;0&#32;};

<emphasis role="comment">//&#32;simplified</emphasis>
qsc_pmac_compute(mac,&#32;&amp;kp,&#32;msg,&#32;64);

<emphasis role="comment">//&#32;long-form</emphasis>
<link linkend="_structqsc__pmac__state">qsc_pmac_state</link>&#32;ctx&#32;=&#32;{&#32;0&#32;};

qsc_pmac_initialize(&amp;ctx,&#32;&amp;kp);

<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;64;&#32;i&#32;+=&#32;<link linkend="_pmac_8h_1a76a06bee20027b9dd557425e78390c73">QSC_PMAC_BLOCK_SIZE</link>)
{
&#32;&#32;qsc_pmac_update(&amp;ctx,&#32;msg&#32;+&#32;i,&#32;<link linkend="_pmac_8h_1a76a06bee20027b9dd557425e78390c73">QSC_PMAC_BLOCK_SIZE</link>);
}

qsc_pmac_finalize(&amp;ctx,&#32;mac);
</computeroutput></literallayout> <formalpara><title>Remarks</title>

<para>For usage examples, see pmac_test.h </para>
</formalpara>
</para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_pmac_8h_1a553d5c1aaea8706eb6a88146cdf2737f"/><section>
    <title>qsc_pmac_modes</title>
<indexterm><primary>qsc_pmac_modes</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_modes</secondary></indexterm>
<para><computeroutput>typedef enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link> <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link></computeroutput></para><para>

<para>The PMAC mode types. </para>
</para>

<para>enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link> </para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1"/><section>
    <title>qsc_pmac_modes</title>
<indexterm><primary>qsc_pmac_modes</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_modes</secondary></indexterm>
<para><computeroutput>enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link></computeroutput></para><para>

<para>The PMAC mode types. </para>
</para>

<para>enum <link linkend="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1">qsc_pmac_modes</link> </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>qsc_pmac_mode_256</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_mode_256</secondary></indexterm>
<anchor xml:id="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1a8baf5b4f47ea7d037a234507c3886fe8"/>qsc_pmac_mode_256</entry><entry>
<para>the pmac-256 mode </para>
</entry></row><row><entry><indexterm><primary>qsc_pmac_mode_512</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_mode_512</secondary></indexterm>
<anchor xml:id="_pmac_8h_1a01bcf64c9786f328be722858e1af97e1a137aef295e1eed125797b204a49b6437"/>qsc_pmac_mode_512</entry><entry>
<para>the pmac-512 mode </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_pmac_8h_1a31301a069ce546f18ef5152e5892559b"/><section>
    <title>qsc_pmac_compute()</title>
<indexterm><primary>qsc_pmac_compute</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_pmac_compute (uint8_t * output, <link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link> * keyparams, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Compute the MAC code and return the result in the mac byte array. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 16 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the MAC code </para>
</entry>
                            </row>
                            <row>
<entry>keyparams</entry><entry>
<para>[const] The pmac keyparams structure </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_pmac_8h_1ab0aee9e4aa722c7c2c1d2429c2762a68"/><section>
    <title>qsc_pmac_dispose()</title>
<indexterm><primary>qsc_pmac_dispose</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_pmac_dispose (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> * ctx)</computeroutput></para><para>

<para>Reset the state values to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>The function state </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_pmac_8h_1af1ed45d96723eb6a9ae7ad9b089f3d99"/><section>
    <title>qsc_pmac_finalize()</title>
<indexterm><primary>qsc_pmac_finalize</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_pmac_finalize (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the message state and returns the MAC code. Absorb the last block of message and create the MAC array. <?linebreak?>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The MAC byte array; receives the MAC code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_pmac_8h_1a4ff51f093813a8628459c0019fc16fa2"/><section>
    <title>qsc_pmac_initialize()</title>
<indexterm><primary>qsc_pmac_initialize</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_pmac_initialize (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> * ctx, <link linkend="_structqsc__pmac__keyparams">qsc_pmac_keyparams</link> * keyparams)</computeroutput></para><para>

<para>Initialize the state with the secret key. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>keyparams</entry><entry>
<para>[const] The pmac keyparams structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_pmac_8h_1a790e4cf68b673d10a5d9453bf970de31"/><section>
    <title>qsc_pmac_update()</title>
<indexterm><primary>qsc_pmac_update</primary><secondary>pmac.h</secondary></indexterm>
<indexterm><primary>pmac.h</primary><secondary>qsc_pmac_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_pmac_update (<link linkend="_structqsc__pmac__state">qsc_pmac_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update the pmac generator with a single block of message input. Absorbs block sized lengths of input message into the state. </para>
</para>

<para><warning><title>Warning</title>

<para>Message length must be a single 16 byte message block. <?linebreak?> </para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The length of the message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
