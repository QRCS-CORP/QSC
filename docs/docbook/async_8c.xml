<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_async_8c" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/async.c File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/async.c</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;async.h&quot;<?linebreak?>#include &quot;cpuidex.h&quot;<?linebreak?>#include &quot;memutils.h&quot;<?linebreak?>#include &lt;stdlib.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_async_8c_1a0efa8e032421b336c8085861663d667e"/>THREAD_FUNC_RETURN THREAD_FUNC_CALL <emphasis role="strong">async_thread_worker</emphasis> (void *arg)</para>
</listitem>
            <listitem><para>bool <link linkend="_async_8c_1aaab58e54628e962848e8074550108e62">qsc_async_parallel_for</link> (void(*task)(void *context, size_t index), void *context, size_t nthreads)</para>

<para>A parallel for loop implementation Processes each function call on a unique thread and waits for all threads before returning. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a9b724664ea6dab2d8481af9b4eee6b31">qsc_async_launch_thread</link> (void(*func)(void *), void *state)</para>

<para>Launch a function on a new thread. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a930ada65a7a87817ecb91bfbc9a93bab">qsc_async_launch_parallel_threads</link> (void(*func)(void *), size_t count,...)</para>

<para>Launch a series of threads, using variadic function arguments. </para>
</listitem>
            <listitem><para>qsc_mutex <link linkend="_async_8c_1a3eba811cd3f2107fb0eaa6c3cc566e7c">qsc_async_mutex_create</link> ()</para>

<para>Create a mutex. </para>
</listitem>
            <listitem><para>bool <link linkend="_async_8c_1ae527eab5e5b23183940c50aa35ae2a63">qsc_async_mutex_destroy</link> (qsc_mutex mtx)</para>

<para>Destroy a mutex. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a0be6ce883a383530decfae10fdee2921">qsc_async_mutex_lock</link> (qsc_mutex mtx)</para>

<para>Lock a mutex. </para>
</listitem>
            <listitem><para>qsc_mutex <link linkend="_async_8c_1aa030a69d5ced56db0754baac881463c6">qsc_async_mutex_lock_ex</link> ()</para>

<para>Creates and locks a mutex. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a34436bcc9edf108937ca9c974fb09701">qsc_async_mutex_unlock</link> (qsc_mutex mtx)</para>

<para>Unlock a mutex. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1abf6f7aeafb442a45824a14213a6b522e">qsc_async_mutex_unlock_ex</link> (qsc_mutex mtx)</para>

<para>Unlocks and destroys a mutex. The mutex must be initialized and destroyed. </para>
</listitem>
            <listitem><para><anchor xml:id="_async_8c_1a05b23e5462a9732b27d5281df8634c19"/>size_t <emphasis role="strong">qsc_async_processor_count</emphasis> ()</para>

<para>Returns the number of CPU cores (including hyper-threads) available on the system. </para>
</listitem>
            <listitem><para>qsc_thread <link linkend="_async_8c_1a37bb19e4d0f7f29aa7a957c091b4ad3d">qsc_async_thread_create</link> (void(*func)(void *), void *state)</para>

<para>Create a thread with one parameter. </para>
</listitem>
            <listitem><para>qsc_thread <link linkend="_async_8c_1ac40e3fb1eb4b15041c7d17dc872d80bc">qsc_async_thread_create_ex</link> (void(*func)(void **), void **args)</para>

<para>Create a thread with multiple parameters. </para>
</listitem>
            <listitem><para>int32_t <link linkend="_async_8c_1a8ef6fd6e0c75fabb7af7f634e95210ca">qsc_async_thread_resume</link> (qsc_thread handle)</para>

<para>Resume a suspended thread. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a60962c913f9f8e7f47594dbb521a20d5">qsc_async_thread_sleep</link> (uint32_t msec)</para>

<para>Pause the thread for a number of milliseconds. </para>
</listitem>
            <listitem><para>int32_t <link linkend="_async_8c_1aa9be69badb42975433a7ea44168a21c0">qsc_async_thread_suspend</link> (qsc_thread handle)</para>

<para>Suspend a thread. </para>
</listitem>
            <listitem><para>bool <link linkend="_async_8c_1abb5e50dcb1ea4ef72bb5e4d6f94773da">qsc_async_thread_terminate</link> (qsc_thread handle)</para>

<para>Terminate a thread. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1aef6fb6dbd971c6f61289ef23ed6d53de">qsc_async_thread_wait</link> (qsc_thread handle)</para>

<para>Wait for a thread to complete execution. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1af400679f161881a9288953c24d369183">qsc_async_thread_wait_time</link> (qsc_thread handle, uint32_t msec)</para>

<para>Wait a number of milliseconds for a thread to complete execution. </para>
</listitem>
            <listitem><para>void <link linkend="_async_8c_1a1f6bfc5d92cfd277201845a1efabfd86">qsc_async_thread_wait_all</link> (qsc_thread *handles, size_t count)</para>

<para>Wait for an array of threads to complete execution. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_async_8c_1a930ada65a7a87817ecb91bfbc9a93bab"/><section>
    <title>qsc_async_launch_parallel_threads()</title>
<indexterm><primary>qsc_async_launch_parallel_threads</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_launch_parallel_threads</secondary></indexterm>
<para><computeroutput>void qsc_async_launch_parallel_threads (void(* func&#160;)(void *), size_t count,  ...)</computeroutput></para><para>

<para>Launch a series of threads, using variadic function arguments. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>func</entry><entry>
<para>The function pointer </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of arguments </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1a9b724664ea6dab2d8481af9b4eee6b31"/><section>
    <title>qsc_async_launch_thread()</title>
<indexterm><primary>qsc_async_launch_thread</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_launch_thread</secondary></indexterm>
<para><computeroutput>void qsc_async_launch_thread (void(* func&#160;)(void *), void * state)</computeroutput></para><para>

<para>Launch a function on a new thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>func</entry><entry>
<para>The function pointer </para>
</entry>
                            </row>
                            <row>
<entry>state</entry><entry>
<para>The function state </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1a3eba811cd3f2107fb0eaa6c3cc566e7c"/><section>
    <title>qsc_async_mutex_create()</title>
<indexterm><primary>qsc_async_mutex_create</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_create</secondary></indexterm>
<para><computeroutput>qsc_mutex qsc_async_mutex_create (void )</computeroutput></para><para>

<para>Create a mutex. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Returns the mutex handle </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1ae527eab5e5b23183940c50aa35ae2a63"/><section>
    <title>qsc_async_mutex_destroy()</title>
<indexterm><primary>qsc_async_mutex_destroy</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_destroy</secondary></indexterm>
<para><computeroutput>bool qsc_async_mutex_destroy (qsc_mutex mtx)</computeroutput></para><para>

<para>Destroy a mutex. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mtx</entry><entry>
<para>The mutex to destroy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true for success </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1a0be6ce883a383530decfae10fdee2921"/><section>
    <title>qsc_async_mutex_lock()</title>
<indexterm><primary>qsc_async_mutex_lock</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_lock</secondary></indexterm>
<para><computeroutput>void qsc_async_mutex_lock (qsc_mutex mtx)</computeroutput></para><para>

<para>Lock a mutex. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mtx</entry><entry>
<para>The mutex to lock </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1aa030a69d5ced56db0754baac881463c6"/><section>
    <title>qsc_async_mutex_lock_ex()</title>
<indexterm><primary>qsc_async_mutex_lock_ex</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_lock_ex</secondary></indexterm>
<para><computeroutput>qsc_mutex qsc_async_mutex_lock_ex (void )</computeroutput></para><para>

<para>Creates and locks a mutex. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Returns the locked mutex </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1a34436bcc9edf108937ca9c974fb09701"/><section>
    <title>qsc_async_mutex_unlock()</title>
<indexterm><primary>qsc_async_mutex_unlock</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_unlock</secondary></indexterm>
<para><computeroutput>void qsc_async_mutex_unlock (qsc_mutex mtx)</computeroutput></para><para>

<para>Unlock a mutex. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mtx</entry><entry>
<para>The mutex to unlock </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1abf6f7aeafb442a45824a14213a6b522e"/><section>
    <title>qsc_async_mutex_unlock_ex()</title>
<indexterm><primary>qsc_async_mutex_unlock_ex</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_mutex_unlock_ex</secondary></indexterm>
<para><computeroutput>void qsc_async_mutex_unlock_ex (qsc_mutex mtx)</computeroutput></para><para>

<para>Unlocks and destroys a mutex. The mutex must be initialized and destroyed. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mtx</entry><entry>
<para>The mutex to unlock </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1aaab58e54628e962848e8074550108e62"/><section>
    <title>qsc_async_parallel_for()</title>
<indexterm><primary>qsc_async_parallel_for</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_parallel_for</secondary></indexterm>
<para><computeroutput>bool qsc_async_parallel_for (void(* task&#160;)(void *context, size_t index), void * context, size_t nthreads)</computeroutput></para><para>

<para>A parallel for loop implementation Processes each function call on a unique thread and waits for all threads before returning. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>task</entry><entry>
<para>A pointer to the function to run in parallel, with a pointer to a state, and the index value </para>
</entry>
                            </row>
                            <row>
<entry>context</entry><entry>
<para>The function context </para>
</entry>
                            </row>
                            <row>
<entry>nthreads</entry><entry>
<para>The number of threads to process</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true if all threads were created </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1a37bb19e4d0f7f29aa7a957c091b4ad3d"/><section>
    <title>qsc_async_thread_create()</title>
<indexterm><primary>qsc_async_thread_create</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_create</secondary></indexterm>
<para><computeroutput>qsc_thread qsc_async_thread_create (void(* func&#160;)(void *), void * state)</computeroutput></para><para>

<para>Create a thread with one parameter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>func</entry><entry>
<para>The thread function </para>
</entry>
                            </row>
                            <row>
<entry>state</entry><entry>
<para>The function state</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns a thread handle, or NULL on failure </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1ac40e3fb1eb4b15041c7d17dc872d80bc"/><section>
    <title>qsc_async_thread_create_ex()</title>
<indexterm><primary>qsc_async_thread_create_ex</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_create_ex</secondary></indexterm>
<para><computeroutput>qsc_thread qsc_async_thread_create_ex (void(* func&#160;)(void **), void ** args)</computeroutput></para><para>

<para>Create a thread with multiple parameters. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>func</entry><entry>
<para>The thread function </para>
</entry>
                            </row>
                            <row>
<entry>args</entry><entry>
<para>The function argument list </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns a thread handle, or NULL on failure </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1a8ef6fd6e0c75fabb7af7f634e95210ca"/><section>
    <title>qsc_async_thread_resume()</title>
<indexterm><primary>qsc_async_thread_resume</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_resume</secondary></indexterm>
<para><computeroutput>int32_t qsc_async_thread_resume (qsc_thread handle)</computeroutput></para><para>

<para>Resume a suspended thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handle</entry><entry>
<para>The thread to resume</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns zero on success </para>
</formalpara>
</para>
</section>
<anchor xml:id="_async_8c_1a60962c913f9f8e7f47594dbb521a20d5"/><section>
    <title>qsc_async_thread_sleep()</title>
<indexterm><primary>qsc_async_thread_sleep</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_sleep</secondary></indexterm>
<para><computeroutput>void qsc_async_thread_sleep (uint32_t msec)</computeroutput></para><para>

<para>Pause the thread for a number of milliseconds. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>msec</entry><entry>
<para>The number of milliseconds to sleep </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1aa9be69badb42975433a7ea44168a21c0"/><section>
    <title>qsc_async_thread_suspend()</title>
<indexterm><primary>qsc_async_thread_suspend</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_suspend</secondary></indexterm>
<para><computeroutput>int32_t qsc_async_thread_suspend (qsc_thread handle)</computeroutput></para><para>

<para>Suspend a thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handle</entry><entry>
<para>The thread to suspend </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1abb5e50dcb1ea4ef72bb5e4d6f94773da"/><section>
    <title>qsc_async_thread_terminate()</title>
<indexterm><primary>qsc_async_thread_terminate</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_terminate</secondary></indexterm>
<para><computeroutput>bool qsc_async_thread_terminate (qsc_thread handle)</computeroutput></para><para>

<para>Terminate a thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handle</entry><entry>
<para>The thread to terminate (terminates calling thread on windows) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1aef6fb6dbd971c6f61289ef23ed6d53de"/><section>
    <title>qsc_async_thread_wait()</title>
<indexterm><primary>qsc_async_thread_wait</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_wait</secondary></indexterm>
<para><computeroutput>void qsc_async_thread_wait (qsc_thread handle)</computeroutput></para><para>

<para>Wait for a thread to complete execution. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handle</entry><entry>
<para>The thread handle </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1a1f6bfc5d92cfd277201845a1efabfd86"/><section>
    <title>qsc_async_thread_wait_all()</title>
<indexterm><primary>qsc_async_thread_wait_all</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_wait_all</secondary></indexterm>
<para><computeroutput>void qsc_async_thread_wait_all (qsc_thread * handles, size_t count)</computeroutput></para><para>

<para>Wait for an array of threads to complete execution. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handles</entry><entry>
<para>The array of threads </para>
</entry>
                            </row>
                            <row>
<entry>count</entry><entry>
<para>The number of threads </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_async_8c_1af400679f161881a9288953c24d369183"/><section>
    <title>qsc_async_thread_wait_time()</title>
<indexterm><primary>qsc_async_thread_wait_time</primary><secondary>async.c</secondary></indexterm>
<indexterm><primary>async.c</primary><secondary>qsc_async_thread_wait_time</secondary></indexterm>
<para><computeroutput>void qsc_async_thread_wait_time (qsc_thread handle, uint32_t msec)</computeroutput></para><para>

<para>Wait a number of milliseconds for a thread to complete execution. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>handle</entry><entry>
<para>The thread handle </para>
</entry>
                            </row>
                            <row>
<entry>msec</entry><entry>
<para>The number of milliseconds to wait </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
