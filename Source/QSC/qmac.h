/*
 * 2025 Quantum Resistant Cryptographic Solutions Corporation
 * All Rights Reserved.
 *
 * NOTICE: This software and all accompanying materials are the exclusive 
 * property of Quantum Resistant Cryptographic Solutions Corporation (QRCS).
 * The intellectual and technical concepts contained within this implementation 
 * are proprietary to QRCS and its authorized licensors and are protected under 
 * applicable U.S. and international copyright, patent, and trade secret laws.
 *
 * CRYPTOGRAPHIC STANDARDS:
 * - This software includes implementations of cryptographic algorithms such as 
 *   SHA3, AES, and others. These algorithms are public domain or standardized 
 *   by organizations such as NIST and are NOT the property of QRCS.
 * - However, all source code, optimizations, and implementations in this library 
 *   are original works of QRCS and are protected under this license.
 *
 * RESTRICTIONS:
 * - Redistribution, modification, or unauthorized distribution of this software, 
 *   in whole or in part, is strictly prohibited.
 * - This software is provided for non-commercial, educational, and research 
 *   purposes only. Commercial use in any form is expressly forbidden.
 * - Licensing and authorized distribution are solely at the discretion of QRCS.
 * - Any use of this software implies acceptance of these restrictions.
 *
 * DISCLAIMER:
 * This software is provided "as is," without warranty of any kind, express or 
 * implied, including but not limited to warranties of merchantability or fitness 
 * for a particular purpose. QRCS disclaims all liability for any direct, indirect, 
 * incidental, or consequential damages resulting from the use or misuse of this software.
 *
 * FULL LICENSE:
 * This software is subject to the **Quantum Resistant Cryptographic Solutions 
 * Proprietary License (QRCS-PL)**. The complete license terms are included 
 * in the LICENSE.txt file distributed with this software.
 *
 * Written by: John G. Underhill
 * Contact: john.underhill@protonmail.com
 */

#ifndef QSC_QMAC_H
#define QSC_QMAC_H

#include "common.h"

/**
 * \file QMAC.h
 * \brief QMAC function definitions
 *
 * \details
 * This header defines the public API for the QMAC (Quantum-Safe Message Authentication Code)
 * implementation. The QMAC algorithm is used for generating message authentication codes using hash and finalization keys generated by Keccak,
 * and a 256-bit carryless multiplication, and reduction using a Galois field GF(2^256) to process the message state.
 * It supports different modes (QMAC-256 and QMAC-512)
 * as determined by the qsc_qmac_modes enumeration. The API includes functions to compute a MAC,
 * initialize and update the QMAC state, finalize the computation, and securely dispose of the state.
 *
 * Additionally, this module provides documentation and references for:
 * - GMAC (Galois Message Authentication Code): a variant of GCM used for authentication.
 * - Carryless multiplication: an efficient method for performing multiplication in binary fields,
 *   as utilized by GMAC.
 * - Galois fields: the underlying mathematical structure used in GMAC and other cryptographic primitives.
 * - SHA3: the cryptographic hash standard specified in FIPS 202.
 *
 * \section qmac_links Reference Links:
 * - <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf">GMAC (NIST SP 800-38D)</a>
 * - <a href="https://software.intel.com/sites/default/files/managed/7b/7b/319433-Intel_64_and_IA-32_Architectures_Optimization_Reference_Manual.pdf ">Carryless Multiplication (Intel Optimization Reference Manual)</a>
 * - <a href="https://www.mathworks.com/help/symbolic/galois-field.html">Galois Fields (MathWorks Documentation)</a> 
 * - <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf">SHA3 FIPS 202</a>
 */

/*! 
 * \def QSC_QMAC_BLOCK_SIZE
 * \brief The natural block size of the message input in bytes.
 */
#define QSC_QMAC_BLOCK_SIZE 32ULL

/*! 
 * \def QSC_QMAC_KEY_SIZE
 * \brief The QMAC key size in bytes.
 */
#define QSC_QMAC_KEY_SIZE 32ULL

/*! 
 * \def QSC_QMAC_MAC_SIZE
 * \brief The QMAC MAC code size in bytes.
 */
#define QSC_QMAC_MAC_SIZE 32ULL

/*! 
 * \def QSC_QMAC_NONCE_SIZE
 * \brief The QMAC nonce size in bytes.
 */
#define QSC_QMAC_NONCE_SIZE 32ULL

/*! 
 * \def QSC_QMAC_STATE_SIZE
 * \brief The QMAC state size.
 */
#define QSC_QMAC_STATE_SIZE (QSC_QMAC_BLOCK_SIZE / sizeof(uint64_t))

/*! 
 * \enum qsc_qmac_modes
 * \brief The QMAC mode types.
 */
typedef enum
{
	qsc_qmac_mode_256 = 0x00U,			/*!< the qmac-256 mode */
	qsc_qmac_mode_512 = 0x01U			/*!< the qmac-512 mode */
} qsc_qmac_modes;

/*! 
 * \struct qsc_qmac_state
 * \brief The QMAC state.
 *
 * This structure holds the internal state of the QMAC algorithm including the
 * finalization subkey, hash subkey, hash state, a pointer to the nonce, and status flags.
 */
QSC_EXPORT_API typedef struct
{
	uint64_t F[QSC_QMAC_STATE_SIZE];	/*!< The finalization subkey */
	uint64_t H[QSC_QMAC_STATE_SIZE];	/*!< The hash subkey */
	uint64_t Y[QSC_QMAC_STATE_SIZE];	/*!< The hash state */
	bool initialized;					/*!< The initialized status */
} qsc_qmac_state;

/*! 
 * \struct qsc_qmac_keyparams
 * \brief The key parameters structure containing key and info arrays and lengths.
 *
 * This structure holds the key material and additional parameters required by QMAC.
 */
QSC_EXPORT_API typedef struct
{
	const uint8_t* key;				/*!< [const] The input MAC key */
	size_t keylen;					/*!< The length in bytes of the MAC key */
	uint8_t* nonce;					/*!< Pointer to the optional nonce array */
	size_t noncelen;				/*!< The nonce length */
	const uint8_t* info;			/*!< [const] The information tweak */
	size_t infolen;					/*!< The length in bytes of the information tweak */
	qsc_qmac_modes mode;			/*!< The operation mode */
} qsc_qmac_keyparams;

/**
 * \brief Compute the MAC code.
 *
 * Computes the QMAC code for the provided message using the given key parameters.
 *
 * \param ctx:			[qsc_qmac_state*] Pointer to the QMAC state structure.
 * \param output:		[uint8_t*] Pointer to the output byte array; receives the MAC code.
 * \param keyparams:	[qsc_qmac_keyparams*] Pointer to the QMAC key parameters structure.
 * \param message:		[const uint8_t*] Pointer to the message input byte array.
 * \param msglen:		[size_t] The number of message bytes to process.
 */
QSC_EXPORT_API void qsc_qmac_compute(uint8_t* output, qsc_qmac_keyparams* keyparams, const uint8_t* message, size_t msglen);

/**
 * \brief Dispose of the state.
 *
 * Erases all variables and resets the state.
 *
 * \param ctx:			[qsc_qmac_state*] Pointer to the QMAC state structure; must be initialized.
 */
QSC_EXPORT_API void qsc_qmac_dispose(qsc_qmac_state* ctx);

/**
 * \brief Finalize the message state and return the MAC code.
 *
 * Absorbs the last block of message and creates the MAC code.
 *
 * \param ctx:			[qsc_qmac_state*] Pointer to the QMAC state structure; must be initialized.
 * \param output:		[uint8_t*] Pointer to the MAC output byte array.
 */
QSC_EXPORT_API void qsc_qmac_finalize(qsc_qmac_state* ctx, uint8_t* output);

/**
 * \brief Initialize the state with the secret key.
 *
 * Initializes the QMAC state using the provided key parameters.
 *
 * \param ctx:			[qsc_qmac_state*] Pointer to the QMAC state structure.
 * \param keyparams:	[qsc_qmac_keyparams*] Pointer to the QMAC key parameters structure.
 */
QSC_EXPORT_API void qsc_qmac_initialize(qsc_qmac_state* ctx, qsc_qmac_keyparams* keyparams);

/**
 * \brief Update the QMAC generator with a single block of message input.
 *
 * Absorbs a block-sized portion of the input message into the QMAC state.
 *
 * \param ctx:			[qsc_qmac_state*] Pointer to the QMAC state structure; must be initialized.
 * \param message:		[const uint8_t*] Pointer to the input message byte array.
 * \param msglen:		[size_t] The length of the message; must equal one block (QSC_QMAC_BLOCK_SIZE).
 */
QSC_EXPORT_API void qsc_qmac_update(qsc_qmac_state* ctx, const uint8_t* message, size_t msglen);

#endif
