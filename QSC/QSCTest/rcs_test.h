
/* 2024 Quantum Resistant Cryptographic Solutions Corporation
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Quantum Resistant Cryptographic Solutions Incorporated.
 * The intellectual and technical concepts contained
 * herein are proprietary to Quantum Resistant Cryptographic Solutions Incorporated
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Quantum Resistant Cryptographic Solutions Incorporated.
 *
 * Written by John G. Underhill
 * Contact: develop@qrcs.ca
 */

#ifndef QSCTEST_RCS_TEST_H
#define QSCTEST_RCS_TEST_H

#include "common.h"
#include "../QSC/rcs.h"

/**
* \file rcs_kat.h
* \brief RCS Known Answer Tests \n
* New vectors have been added for the extended modes RSX/RCS-256 and RSX/RCS-512, are from the CEX cryptographic library, reference: 
* The C++ <a href="https://github.com/Steppenwolfe65/CEX">CEX cryptographic library</a>
* \author John Underhill
* \date October 02, 2020
*/

#if defined(QSC_SYSTEM_HAS_AVX512) 
#	if defined(QSC_SYSTEM_AESNI_ENABLED)
#		if !defined(QSC_RCS_AUTHENTICATED)
#			define QSCTEST_RCS_WIDE_BLOCK_TESTS
#		endif
#	endif
#endif

#define QSCTEST_RCS_TEST_CYCLES 100

/**
* \brief Tests the RCS 256-bit key KAT vectors from CEX.
* The C++ <a href="https://github.com/Steppenwolfe65/CEX">CEX cryptographic library</a>
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* The test uses use original (and authoritative) vectors generated by the CEX library implementation</a>
* <a href="https://github.com/Steppenwolfe65/CEX/blob/master/Test/RCSTest.cpp">CEX RCS tests</a>
*/
bool qsctest_rcs256_kat(void);

/**
* \brief Tests the RCS 512-bit key KAT vectors from CEX.
* The C++ <a href="https://github.com/Steppenwolfe65/CEX">CEX cryptographic library</a>
*
* \return Returns true for success
*
* \remarks <b>Test References:</b> \n
* The test uses use original (and authoritative) vectors generated by the CEX library implementation</a>
* <a href="https://github.com/Steppenwolfe65/CEX/blob/master/Test/RCSTest.cpp">CEX RCS tests</a>
*/
bool qsctest_rcs512_kat(void);

/**
* \brief Tests RCS-256 with random inputs for correct operation.
*
* \return Returns true for success
*/
bool qsctest_rcs256_stress_test(void);

/**
* \brief Tests RCS-512 with random inputs for correct operation.
*
* \return Returns true for success
*/
bool qsctest_rcs512_stress_test(void);

/**
* \brief Tests the RCS extended transform API.
*
* \return Returns true for success
*/
bool qsctest_extended_cipher_test(void);

#if defined(QSCTEST_RCS_WIDE_BLOCK_TESTS)
/**
* \brief Tests the RCS AVX functions for equal output to sequential processing.
*
* \return Returns true for success
*/
bool qsctest_rcs_wide_equality(void);
#endif

/**
* \brief Run all tests.
*/
void qsctest_rcs_run(void);

#endif
