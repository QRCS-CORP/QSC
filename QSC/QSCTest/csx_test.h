/* 2025 Quantum Resistant Cryptographic Solutions Corporation
 * All Rights Reserved.
 *
 * NOTICE: This software and all accompanying materials are the exclusive 
 * property of Quantum Resistant Cryptographic Solutions Corporation (QRCS).
 * The intellectual and technical concepts contained within this implementation 
 * are proprietary to QRCS and its authorized licensors and are protected under 
 * applicable U.S. and international copyright, patent, and trade secret laws.
 *
 * CRYPTOGRAPHIC STANDARDS:
 * - This software includes implementations of cryptographic algorithms such as 
 *   SHA3, AES, and others. These algorithms are public domain or standardized 
 *   by organizations such as NIST and are NOT the property of QRCS.
 * - However, all source code, optimizations, and implementations in this library 
 *   are original works of QRCS and are protected under this license.
 *
 * RESTRICTIONS:
 * - Redistribution, modification, or unauthorized distribution of this software, 
 *   in whole or in part, is strictly prohibited.
 * - This software is provided for non-commercial, educational, and research 
 *   purposes only. Commercial use in any form is expressly forbidden.
 * - Licensing and authorized distribution are solely at the discretion of QRCS.
 * - Any use of this software implies acceptance of these restrictions.
 *
 * DISCLAIMER:
 * This software is provided "as is," without warranty of any kind, express or 
 * implied, including but not limited to warranties of merchantability or fitness 
 * for a particular purpose. QRCS disclaims all liability for any direct, indirect, 
 * incidental, or consequential damages resulting from the use or misuse of this software.
 *
 * FULL LICENSE:
 * This software is subject to the **Quantum Resistant Cryptographic Solutions 
 * Proprietary License (QRCS-PL)**. The complete license terms are included 
 * in the LICENSE.txt file distributed with this software.
 *
 * Written by: John G. Underhill
 * Contact: john.underhill@protonmail.com
 */

#ifndef QSCTEST_CSX_TEST_H
#define QSCTEST_CSX_TEST_H

#include "../QSC/common.h"
#include "../QSC/csx.h"

/**
 * \file csx_test.h
 * \brief CSX-512 Known Answer and Stress Tests.
 *
 * \details
 * This header file defines functions for testing the CSX-512 (CSXP40) cipher implementation.
 * The test suite verifies the correct operation of the CSX cipher by comparing its encryption output
 * against known test vectors generated by the authoritative CEX cryptographic library. The tests include:
 *
 * - A Known Answer Test (KAT) that uses fixed 512-bit key vectors and predetermined input messages to ensure
 *   that the encryption produces the expected output.
 * - A Stress Test that encrypts randomly generated input messages of varying lengths to validate the cipher's
 *   operation under a wide range of conditions.
 * - A Wide Block Test (enabled under specific conditions) that verifies the AVX-accelerated encryption produces
 *   output identical to that of sequential processing.
 *
 * \section csx_test_links Reference Links
 * - <a href="https://github.com/Steppenwolfe65/CEX">CEX cryptographic library</a>
 * - <a href="https://github.com/Steppenwolfe65/CEX/blob/master/Test/CSXTest.cpp">CEX CSX tests</a>
 */

/**
 * \def QSCTEST_CSX_TEST_CYCLES
 * \brief Number of test cycles to execute in CSX tests.
 *
 * This macro defines the number of iterations (cycles) used in the CSX stress and wide block tests.
 * It is set to 100.
 */
#define QSCTEST_CSX_TEST_CYCLES 100

#if defined(QSC_SYSTEM_AVX_INTRINSICS)
#	if !defined(QSC_CSX_AUTHENTICATED)
#		define QSCTEST_CSX_WIDE_BLOCK_TESTS
#	endif
#endif

/**
 * \def QSCTEST_CSX_WIDE_BLOCK_TESTS
 * \brief Enables wide block tests for CSX when AVX intrinsics are available.
 *
 * When AVX intrinsics are enabled and the CSX cipher is configured without authenticated mode,
 * this macro is defined to enable tests that compare the output of AVX-accelerated encryption
 * with that of sequential processing.
 */

/**
 * \brief Tests the CSX 512-bit key Known Answer Test (KAT) vectors from the CEX cryptographic library.
 *
 * \return Returns true if the encryption output matches the known answer test vectors; false otherwise.
 *
 * \remarks
 * This test uses original, authoritative vectors generated by the CEX library implementation.
 * For additional reference, see the <a href="https://github.com/Steppenwolfe65/CEX/blob/master/Test/CSXTest.cpp">CEX CSX tests</a>.
 */
bool qsctest_csx512_kat(void);

/**
 * \brief Performs a stress test on the CSX-512 cipher using random input messages.
 *
 * \return Returns true if all stress test iterations pass successfully; false otherwise.
 *
 * \remarks
 * The stress test repeatedly encrypts randomly generated messages of varying lengths and then
 * decrypts the output to verify that the original plaintext is recovered correctly.
 */
bool qsctest_csx512_stress(void);

#if defined(QSCTEST_CSX_WIDE_BLOCK_TESTS)
/**
 * \brief Tests the CSX AVX functions by verifying that wide block encryption produces output
 *        identical to that of sequential processing.
 *
 * \return Returns true if the outputs match; false otherwise.
 */
bool qsctest_csx_wide_equality(void);
#endif

/**
 * \brief Runs all CSX-512 tests, including KAT, stress, and (if enabled) wide block tests.
 */
void qsctest_csx_run(void);


#endif
