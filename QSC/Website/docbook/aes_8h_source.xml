<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_aes_8h_source" xml:lang="en-US">
<title>aes.h</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/aes.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;2025&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation</emphasis>
2 <emphasis role="comment">&#32;*&#32;All&#32;Rights&#32;Reserved.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;NOTICE:&#32;This&#32;software&#32;and&#32;all&#32;accompanying&#32;materials&#32;are&#32;the&#32;exclusive&#32;</emphasis>
5 <emphasis role="comment">&#32;*&#32;property&#32;of&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation&#32;(QRCS).</emphasis>
6 <emphasis role="comment">&#32;*&#32;The&#32;intellectual&#32;and&#32;technical&#32;concepts&#32;contained&#32;within&#32;this&#32;implementation&#32;</emphasis>
7 <emphasis role="comment">&#32;*&#32;are&#32;proprietary&#32;to&#32;QRCS&#32;and&#32;its&#32;authorized&#32;licensors&#32;and&#32;are&#32;protected&#32;under&#32;</emphasis>
8 <emphasis role="comment">&#32;*&#32;applicable&#32;U.S.&#32;and&#32;international&#32;copyright,&#32;patent,&#32;and&#32;trade&#32;secret&#32;laws.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;CRYPTOGRAPHIC&#32;STANDARDS:</emphasis>
11 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;includes&#32;implementations&#32;of&#32;cryptographic&#32;algorithms&#32;such&#32;as&#32;</emphasis>
12 <emphasis role="comment">&#32;*&#32;&#32;&#32;SHA3,&#32;AES,&#32;and&#32;others.&#32;These&#32;algorithms&#32;are&#32;public&#32;domain&#32;or&#32;standardized&#32;</emphasis>
13 <emphasis role="comment">&#32;*&#32;&#32;&#32;by&#32;organizations&#32;such&#32;as&#32;NIST&#32;and&#32;are&#32;NOT&#32;the&#32;property&#32;of&#32;QRCS.</emphasis>
14 <emphasis role="comment">&#32;*&#32;-&#32;However,&#32;all&#32;source&#32;code,&#32;optimizations,&#32;and&#32;implementations&#32;in&#32;this&#32;library&#32;</emphasis>
15 <emphasis role="comment">&#32;*&#32;&#32;&#32;are&#32;original&#32;works&#32;of&#32;QRCS&#32;and&#32;are&#32;protected&#32;under&#32;this&#32;license.</emphasis>
16 <emphasis role="comment">&#32;*</emphasis>
17 <emphasis role="comment">&#32;*&#32;RESTRICTIONS:</emphasis>
18 <emphasis role="comment">&#32;*&#32;-&#32;Redistribution,&#32;modification,&#32;or&#32;unauthorized&#32;distribution&#32;of&#32;this&#32;software,&#32;</emphasis>
19 <emphasis role="comment">&#32;*&#32;&#32;&#32;in&#32;whole&#32;or&#32;in&#32;part,&#32;is&#32;strictly&#32;prohibited.</emphasis>
20 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;is&#32;provided&#32;for&#32;non-commercial,&#32;educational,&#32;and&#32;research&#32;</emphasis>
21 <emphasis role="comment">&#32;*&#32;&#32;&#32;purposes&#32;only.&#32;Commercial&#32;use&#32;in&#32;any&#32;form&#32;is&#32;expressly&#32;forbidden.</emphasis>
22 <emphasis role="comment">&#32;*&#32;-&#32;Licensing&#32;and&#32;authorized&#32;distribution&#32;are&#32;solely&#32;at&#32;the&#32;discretion&#32;of&#32;QRCS.</emphasis>
23 <emphasis role="comment">&#32;*&#32;-&#32;Any&#32;use&#32;of&#32;this&#32;software&#32;implies&#32;acceptance&#32;of&#32;these&#32;restrictions.</emphasis>
24 <emphasis role="comment">&#32;*</emphasis>
25 <emphasis role="comment">&#32;*&#32;DISCLAIMER:</emphasis>
26 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as&#32;is,&quot;&#32;without&#32;warranty&#32;of&#32;any&#32;kind,&#32;express&#32;or&#32;</emphasis>
27 <emphasis role="comment">&#32;*&#32;implied,&#32;including&#32;but&#32;not&#32;limited&#32;to&#32;warranties&#32;of&#32;merchantability&#32;or&#32;fitness&#32;</emphasis>
28 <emphasis role="comment">&#32;*&#32;for&#32;a&#32;particular&#32;purpose.&#32;QRCS&#32;disclaims&#32;all&#32;liability&#32;for&#32;any&#32;direct,&#32;indirect,&#32;</emphasis>
29 <emphasis role="comment">&#32;*&#32;incidental,&#32;or&#32;consequential&#32;damages&#32;resulting&#32;from&#32;the&#32;use&#32;or&#32;misuse&#32;of&#32;this&#32;software.</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;FULL&#32;LICENSE:</emphasis>
32 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;subject&#32;to&#32;the&#32;**Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;</emphasis>
33 <emphasis role="comment">&#32;*&#32;Proprietary&#32;License&#32;(QRCS-PL)**.&#32;The&#32;complete&#32;license&#32;terms&#32;are&#32;included&#32;</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;the&#32;LICENSE.txt&#32;file&#32;distributed&#32;with&#32;this&#32;software.</emphasis>
35 <emphasis role="comment">&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;Written&#32;by:&#32;John&#32;G.&#32;Underhill</emphasis>
37 <emphasis role="comment">&#32;*&#32;Contact:&#32;john.underhill@protonmail.com</emphasis>
38 <emphasis role="comment">&#32;*/</emphasis>
39 
40 
41 
42 <emphasis role="preprocessor">#ifndef&#32;QSC_AES_H</emphasis>
43 <emphasis role="preprocessor">#define&#32;QSC_AES_H</emphasis>
44 
45 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&quot;intrinsics.h&quot;</emphasis>
47 
69 <emphasis role="comment">//</emphasis>
74 <emphasis role="preprocessor">#define&#32;QSC_HBA_KMAC_EXTENSION</emphasis>
75 
77 <emphasis role="comment">//\def&#32;QSC_HBA_HKDF_EXTENSION</emphasis>
78 <emphasis role="comment">//*&#32;Enables&#32;the&#32;HKDF&#32;extensions&#32;for&#32;the&#32;HBA&#32;cipher-mode;&#32;alternative&#32;to&#32;HBA(cSHAKE)</emphasis>
79 <emphasis role="comment">//*/</emphasis>
80 <emphasis role="preprocessor">#define&#32;QSC_HBA_HKDF_EXTENSION</emphasis>
81 
82 <emphasis role="preprocessor">#if&#32;defined(QSC_HBA_KMAC_EXTENSION)</emphasis>
83 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&quot;<link linkend="_sha3_8h">sha3.h</link>&quot;</emphasis>
84 <emphasis role="preprocessor">#else</emphasis>
85 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&quot;<link linkend="_sha2_8h">sha2.h</link>&quot;</emphasis>
86 <emphasis role="preprocessor">#endif</emphasis>
87 
91 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_aes_8h_1aa53a8230f3171dbb0958e240cb90738e">qsc_aes_cipher_type</link>
92 {
93 &#32;&#32;&#32;&#32;<link linkend="_aes_8h_1aa53a8230f3171dbb0958e240cb90738ea3fa28e6e7b813680875bd9e684d2d846">qsc_aes_cipher_128</link>&#32;=&#32;1,&#32;
94 &#32;&#32;&#32;&#32;<link linkend="_aes_8h_1aa53a8230f3171dbb0958e240cb90738eab6cc0d3d322b25b627840fb67b223e65">qsc_aes_cipher_256</link>&#32;=&#32;2,&#32;
95 }&#32;<link linkend="_aes_8h_1aa53a8230f3171dbb0958e240cb90738e">qsc_aes_cipher_type</link>;
96 
100 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_aes_8h_1ae448b4228ce83fb47116ed16b8400741">qsc_aes_cipher_mode</link>
101 {
102 &#32;&#32;&#32;&#32;<link linkend="_aes_8h_1ae448b4228ce83fb47116ed16b8400741a37bee5da46b7288cbbafb193ad2ea8cf">qsc_aes_mode_cbc</link>&#32;=&#32;1,&#32;&#32;&#32;
103 &#32;&#32;&#32;&#32;<link linkend="_aes_8h_1ae448b4228ce83fb47116ed16b8400741a8d3b8ce37e4ac8626032d5efd303c3a0">qsc_aes_mode_ctr</link>&#32;=&#32;2,&#32;&#32;&#32;
104 &#32;&#32;&#32;&#32;<link linkend="_aes_8h_1ae448b4228ce83fb47116ed16b8400741a25ae0c9efab177710193da72b08e1265">qsc_aes_mode_ecb</link>&#32;=&#32;3,&#32;&#32;&#32;
105 }&#32;<link linkend="_aes_8h_1ae448b4228ce83fb47116ed16b8400741">qsc_aes_cipher_mode</link>;
106 
107 <emphasis role="comment">/***********************************</emphasis>
108 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;AES&#32;CONSTANTS&#32;AND&#32;SIZES&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
109 <emphasis role="comment">***********************************/</emphasis>
110 
115 <emphasis role="preprocessor">#define&#32;QSC_AES_BLOCK_SIZE&#32;16</emphasis>
116 
121 <emphasis role="preprocessor">#define&#32;QSC_AES_IV_SIZE&#32;16</emphasis>
122 
127 <emphasis role="preprocessor">#define&#32;QSC_AES128_KEY_SIZE&#32;16</emphasis>
128 
133 <emphasis role="preprocessor">#define&#32;QSC_AES256_KEY_SIZE&#32;32</emphasis>
134 
139 <emphasis role="preprocessor">#define&#32;QSC_HBA256_MAC_SIZE&#32;32</emphasis>
140 
145 <emphasis role="preprocessor">#define&#32;QSC_HBA_MAXAAD_SIZE&#32;256</emphasis>
146 
151 <emphasis role="preprocessor">#define&#32;QSC_HBA_MAXINFO_SIZE&#32;256</emphasis>
152 
157 <emphasis role="preprocessor">#if&#32;defined(QSC_HBA_KMAC_EXTENSION)</emphasis>
158 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;HBA_NAME_SIZE&#32;29</emphasis>
159 <emphasis role="preprocessor">#else</emphasis>
160 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;HBA_NAME_SIZE&#32;33</emphasis>
161 <emphasis role="preprocessor">#endif</emphasis>
162 
168 <emphasis role="preprocessor">#if&#32;defined(QSC_HBA_KMAC_EXTENSION)</emphasis>
169 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;QSC_HBA_KMAC_AUTH</emphasis>
170 <emphasis role="preprocessor">#endif</emphasis>
171 
178 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
179 {
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;<link linkend="_structqsc__aes__keyparams_1aa60a0c39d29c4a6fdaac5bfc05f1dbec">key</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__aes__keyparams_1af347fae5dae0b613448c54f3dea76ad2">keylen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
182 &#32;&#32;&#32;&#32;uint8_t*&#32;<link linkend="_structqsc__aes__keyparams_1a3da4e88c03c821f8b2dc28af618543bd">nonce</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;<link linkend="_structqsc__aes__keyparams_1af70030048884ad194b9870321e1cf792">info</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__aes__keyparams_1aeeac5f1dea8f8694bdf3d934c72ae872">infolen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
185 }&#32;<link linkend="_structqsc__aes__keyparams">qsc_aes_keyparams</link>;
186 
190 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
191 {
192 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_AESNI_ENABLED)</emphasis>
193 &#32;&#32;&#32;&#32;__m128i&#32;<link linkend="_structqsc__aes__state_1a345a6390682918fd6852d2ed5da1c4b7">roundkeys</link>[31];&#32;&#32;&#32;&#32;&#32;&#32;
194 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined(QSC_SYSTEM_HAS_AVX512)</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m512i&#32;roundkeysw[31];
196 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
197 <emphasis role="preprocessor">#else</emphasis>
198 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_structqsc__aes__state_1a345a6390682918fd6852d2ed5da1c4b7">roundkeys</link>[124];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
199 <emphasis role="preprocessor">#endif</emphasis>
200 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__aes__state_1a44bdbbaee0cf6de6912ae93ee8dc5702">roundkeylen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__aes__state_1a79c090aba458c743cdbf8585f7a058c9">rounds</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
202 &#32;&#32;&#32;&#32;uint8_t*&#32;<link linkend="_structqsc__aes__state_1a3da4e88c03c821f8b2dc28af618543bd">nonce</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
203 }&#32;<link linkend="_structqsc__aes__state">qsc_aes_state</link>;
204 
205 <emphasis role="comment">/*&#32;common&#32;functions&#32;*/</emphasis>
206 
210 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1acb1b9fd8437451657beca66abc728186">qsc_aes_dispose</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state);
211 
223 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a2bb21b64e1efb178d1f1ae57ce3e1ab2">qsc_aes_initialize</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structqsc__aes__keyparams">qsc_aes_keyparams</link>*&#32;keyparams,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;encryption,&#32;<link linkend="_aes_8h_1aa53a8230f3171dbb0958e240cb90738e">qsc_aes_cipher_type</link>&#32;ctype);
224 
225 <emphasis role="comment">/*&#32;cbc&#32;mode&#32;*/</emphasis>
226 
238 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a99ba803d35a7bfbf0e7e1df57214c901">qsc_aes_cbc_decrypt</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;outputlen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
239 
250 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a8cdd54ccd033cf355c5f4a8967f4683c">qsc_aes_cbc_encrypt</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
251 
261 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a7899343ed7871332a8adfec75d9e0e07">qsc_aes_cbc_decrypt_block</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
262 
272 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1aab3fef5311f4655e332b05d9a0d33493">qsc_aes_cbc_encrypt_block</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
273 
274 <emphasis role="comment">/*&#32;pkcs7&#32;*/</emphasis>
275 
282 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a6d67695184a3f97172d0590002cb18d6">qsc_pkcs7_add_padding</link>(uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
283 
291 QSC_EXPORT_API&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_aes_8h_1ab2833090995832e107a059fe012b56c0">qsc_pkcs7_padding_length</link>(<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
292 
293 <emphasis role="comment">/*&#32;ctr&#32;mode&#32;*/</emphasis>
294 
306 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1aeb52bc95067e34098b8a27b0a0b80abf">qsc_aes_ctrbe_transform</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
307 
319 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a098c89f24df538f3b1d474dc264f4694">qsc_aes_ctrle_transform</link>(<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
320 
321 <emphasis role="comment">/*&#32;ecb&#32;mode&#32;*/</emphasis>
322 
331 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a1bb23a27efad75b6906c44fd226087de">qsc_aes_ecb_decrypt_block</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
332 
341 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a8a9f6fd4a3763e223fc3eadb50f15643">qsc_aes_ecb_encrypt_block</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structqsc__aes__state">qsc_aes_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
342 
343 <emphasis role="comment">/*&#32;HBA-256&#32;*/</emphasis>
344 
349 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
350 {
351 <emphasis role="preprocessor">#if&#32;defined(QSC_HBA_KMAC_EXTENSION)</emphasis>
352 &#32;&#32;&#32;&#32;<link linkend="_structqsc__keccak__state">qsc_keccak_state</link>&#32;<link linkend="_structqsc__aes__hba256__state_1a7dcff7935c756d16f1e445db22570492">kstate</link>;&#32;&#32;&#32;&#32;
353 <emphasis role="preprocessor">#else</emphasis>
354 &#32;&#32;&#32;&#32;<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>&#32;<link linkend="_structqsc__aes__hba256__state_1a7dcff7935c756d16f1e445db22570492">kstate</link>;
355 <emphasis role="preprocessor">#endif</emphasis>
356 &#32;&#32;&#32;&#32;<link linkend="_structqsc__aes__state">qsc_aes_state</link>&#32;<link linkend="_structqsc__aes__hba256__state_1a4c092c1eca0d9109c41462ba34909d5e">cstate</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
357 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__aes__hba256__state_1a1944753ac8107ec537f75b7e0201d866">counter</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
358 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__aes__hba256__state_1ae94d8409732ec9a97edce2fb6448be8d">mkey</link>[32];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
359 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__aes__hba256__state_1aa0daad95efd06d820b491981635f9c72">cust</link>[<link linkend="_aes_8h_1ad26e21759c9003561f5b7f4232ba588a">QSC_HBA_MAXINFO_SIZE</link>];&#32;
360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__aes__hba256__state_1a0d806096012676672a0009667f13c64d">custlen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
361 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structqsc__aes__hba256__state_1af69c97ab299480b81e3f622d79777334">encrypt</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
362 }&#32;<link linkend="_structqsc__aes__hba256__state">qsc_aes_hba256_state</link>;
363 
373 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a90515597a3277e357973ac456d853c8d">qsc_aes_hba256_dispose</link>(<link linkend="_structqsc__aes__hba256__state">qsc_aes_hba256_state</link>*&#32;state);
374 
385 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1a33ddd7d27a86d775abc1bda63cd9e399">qsc_aes_hba256_initialize</link>(<link linkend="_structqsc__aes__hba256__state">qsc_aes_hba256_state</link>*&#32;state,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structqsc__aes__keyparams">qsc_aes_keyparams</link>*&#32;keyparams,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;encrypt);
386 
397 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_aes_8h_1ac8404cb73e9e5f22dce09a989b9125d4">qsc_aes_hba256_set_associated</link>(<link linkend="_structqsc__aes__hba256__state">qsc_aes_hba256_state</link>*&#32;state,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;data,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;datalen);
398 
414 QSC_EXPORT_API&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_aes_8h_1a3ee9dce5cb91a8daff60b89a9eb0d4c5">qsc_aes_hba256_transform</link>(<link linkend="_structqsc__aes__hba256__state">qsc_aes_hba256_state</link>*&#32;state,&#32;uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length);
415 
416 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
