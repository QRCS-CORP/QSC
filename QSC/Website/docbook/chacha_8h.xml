<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_chacha_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/chacha.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/chacha.h</primary></indexterm>
<para>

<para>Contains the public api and documentation for the ChaChaPoly20 implementation Key sizes are 128- and 256-bit (16 and 32 byte). The nonce must be 64-bits in length (8 bytes). </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structqsc__chacha__state">qsc_chacha_state</link></para>

<para>Internal: contains the <link linkend="_structqsc__chacha__state">qsc_chacha_state</link> state. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__chacha__keyparams">qsc_chacha_keyparams</link></para>

<para>The key parameters structure containing key, and nonce arrays and lengths. Use this structure to load an input cipher-key and nonce using the qsc_chacha_initialize function. Keys must be random and secret, and align to the corresponding key size of the cipher implemented. The key must be QSC_CHACHA_KEY128_SIZE or QSC_CHACHA_KEY256_SIZE in length. The nonce is always QSC_CHACHA_NONCE_SIZE in length. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_chacha_8h_1a4c0d431dcf04a458983878c714608c53"/>#define <emphasis role="strong">QSC_CHACHA_BLOCK_SIZE</emphasis>&#160;&#160;&#160;64</para>

<para>The internal block size. </para>
</listitem>
            <listitem><para><anchor xml:id="_chacha_8h_1af2b25c2a4ab2981038f2d480a2cbe9aa"/>#define <emphasis role="strong">QSC_CHACHA_KEY128_SIZE</emphasis>&#160;&#160;&#160;16</para>

<para>The size of the 128-bit secret key array in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_chacha_8h_1af0baec38ae6e816c276dd88316408b39"/>#define <emphasis role="strong">QSC_CHACHA_KEY256_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The size of the 256-bit secret key array in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_chacha_8h_1af41a09548e9181403299ff4057aaa715"/>#define <emphasis role="strong">QSC_CHACHA_NONCE_SIZE</emphasis>&#160;&#160;&#160;8</para>

<para>The size of the nonce array in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_chacha_8h_1acacd14ab3dd74aff272f7bb39344187e"/>#define <emphasis role="strong">QSC_CHACHA_ROUND_COUNT</emphasis>&#160;&#160;&#160;20</para>

<para>The number of mixing rounds used by ChaCha. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API void <link linkend="_chacha_8h_1a23540b2563ed245f9399c9343a728a93">qsc_chacha_dispose</link> (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> *ctx)</para>

<para>Dispose of the ChaCha cipher state. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_chacha_8h_1a9f79c54952c8f3ebf065dd900ba37e41">qsc_chacha_initialize</link> (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> *ctx, const <link linkend="_structqsc__chacha__keyparams">qsc_chacha_keyparams</link> *keyparams)</para>

<para>Initialize the state with the secret key and nonce. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_chacha_8h_1a2cc406c69bd6810302a37db43516f519">qsc_chacha_transform</link> (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> *ctx, uint8_t *output, const uint8_t *input, size_t length)</para>

<para>Transform a length of input text. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains the public api and documentation for the ChaChaPoly20 implementation Key sizes are 128- and 256-bit (16 and 32 byte). The nonce must be 64-bits in length (8 bytes). </para>

<para><formalpara><title>Author</title>

<para>John Underhill </para>
</formalpara>
<formalpara><title>Date</title>

<para>April 7, 2018</para>
</formalpara>
ChaCha encryption example <?linebreak?><literallayout><computeroutput><emphasis role="keywordtype">size_t</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;MSG_LEN&#32;=&#32;1024;
uint8_t&#32;key[32]&#32;=&#32;{...};
uint8_t&#32;nonce[<link linkend="_chacha_8h_1af41a09548e9181403299ff4057aaa715">QSC_CHACHA_NONCE_SIZE</link>]&#32;=&#32;{...};
uint8_t&#32;msg[MSG_LEN]&#32;=&#32;{...};
uint8_t&#32;out[MSG_LEN]&#32;=&#32;{&#32;0&#32;};

<link linkend="_structqsc__chacha__state">qsc_chacha_state</link>&#32;ctx;
qsc_chacha_initialize(&amp;ctx,&#32;key,&#32;32,&#32;nonce);
qsc_chacha_transform(&amp;ctx,&#32;out,&#32;msg,&#32;MSG_LEN);
</computeroutput></literallayout> An implementation of the ChaChaPoly20 stream cipher by Daniel J. Bernstein. Implementation contains AVX, AVX2, and AVX512 intrinsics support. <formalpara><title>Remarks</title>

<para>For usage examples, see chacha_test.h </para>
</formalpara>
</para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_chacha_8h_1a23540b2563ed245f9399c9343a728a93"/><section>
    <title>qsc_chacha_dispose()</title>
<indexterm><primary>qsc_chacha_dispose</primary><secondary>chacha.h</secondary></indexterm>
<indexterm><primary>chacha.h</primary><secondary>qsc_chacha_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_chacha_dispose (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the ChaCha cipher state. </para>
</para>

<para><warning><title>Warning</title>

<para>The dispose function must be called when disposing of the cipher. This function destroys internal arrays and data</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_chacha_8h_1a9f79c54952c8f3ebf065dd900ba37e41"/><section>
    <title>qsc_chacha_initialize()</title>
<indexterm><primary>qsc_chacha_initialize</primary><secondary>chacha.h</secondary></indexterm>
<indexterm><primary>chacha.h</primary><secondary>qsc_chacha_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_chacha_initialize (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> * ctx, const <link linkend="_structqsc__chacha__keyparams">qsc_chacha_keyparams</link> * keyparams)</computeroutput></para><para>

<para>Initialize the state with the secret key and nonce. </para>
</para>

<para><warning><title>Warning</title>

<para>The key array must be either 16 or 32 bytes in length </para>

<para>The nonce array must be 8 bytes bytes in length</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                            <row>
<entry>keyparams</entry><entry>
<para>[const][struct] The secret key and nonce structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_chacha_8h_1a2cc406c69bd6810302a37db43516f519"/><section>
    <title>qsc_chacha_transform()</title>
<indexterm><primary>qsc_chacha_transform</primary><secondary>chacha.h</secondary></indexterm>
<indexterm><primary>chacha.h</primary><secondary>qsc_chacha_transform</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_chacha_transform (<link linkend="_structqsc__chacha__state">qsc_chacha_state</link> * ctx, uint8_t * output, const uint8_t * input, size_t length)</computeroutput></para><para>

<para>Transform a length of input text. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>A pointer to the output byte array </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>[const] A pointer to the input byte array </para>
</entry>
                            </row>
                            <row>
<entry>length</entry><entry>
<para>The number of bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
