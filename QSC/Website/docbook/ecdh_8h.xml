<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_ecdh_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/ecdh.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/ecdh.h</primary></indexterm>
<para>

<para>Contains the primary public api for the Elliptic Curve Diffie Hellman key exchange. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_ecdh_8h_1a74925f4eafe51cba2d994675df4741cc"/>#define <emphasis role="strong">QSC_ECDH_PRIVATEKEY_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the secret private-key array. </para>
</listitem>
            <listitem><para><anchor xml:id="_ecdh_8h_1ac2d938015864ac4e41d2d6d7dd3b7b21"/>#define <emphasis role="strong">QSC_ECDH_PUBLICKEY_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the public-key array. </para>
</listitem>
            <listitem><para><anchor xml:id="_ecdh_8h_1a1746b5a10440f059dd066559ceafb660"/>#define <emphasis role="strong">QSC_ECDH_SHAREDSECRET_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the shared secret-key array. </para>
</listitem>
            <listitem><para><anchor xml:id="_ecdh_8h_1a0a98b48b0fe33b1fa9ac610968927d78"/>#define <emphasis role="strong">QSC_ECDH_SEED_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the shared secret-key array. </para>
</listitem>
            <listitem><para><anchor xml:id="_ecdh_8h_1a38679bd2fe0857e7df596729ee84a097"/>#define <emphasis role="strong">QSC_ECDH_ALGNAME</emphasis>&#160;&#160;&#160;&quot;ECDH&quot;</para>

<para>The formal algorithm name. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API bool <link linkend="_ecdh_8h_1acf8a0dd71a8090717a6958ee1b1103e5">qsc_ecdh_key_exchange</link> (uint8_t *secret, const uint8_t *privatekey, const uint8_t *publickey)</para>

<para>Decapsulates the shared secret for a given cipher-text using a private-key. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_ecdh_8h_1aabc35fd16d6ad86406261a8df6c30d11">qsc_ecdh_generate_keypair</link> (uint8_t *publickey, uint8_t *privatekey, bool(*rng_generate)(uint8_t *, size_t))</para>

<para>Generates public and private key for the ECDH key encapsulation mechanism. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_ecdh_8h_1a63c73b113069f9817a50eb961f58a42d">qsc_ecdh_generate_seeded_keypair</link> (uint8_t *publickey, uint8_t *privatekey, const uint8_t *seed)</para>

<para>Generates public and private key for the ECDH key encapsulation mechanism. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains the primary public api for the Elliptic Curve Diffie Hellman key exchange. </para>

<para><formalpara>
<title>Example</title>
<para><literallayout><computeroutput><emphasis role="comment">//&#32;An&#32;example&#32;of&#32;key-pair&#32;creation,&#32;encryption,&#32;and&#32;decryption</emphasis>
uint8_t&#32;pk[<link linkend="_ecdh_8h_1ac2d938015864ac4e41d2d6d7dd3b7b21">QSC_ECDH_PUBLICKEY_SIZE</link>];
uint8_t&#32;sk[<link linkend="_ecdh_8h_1a74925f4eafe51cba2d994675df4741cc">QSC_ECDH_PRIVATEKEY_SIZE</link>];
uint8_t&#32;sec[<link linkend="_ecdh_8h_1a1746b5a10440f059dd066559ceafb660">QSC_ECDH_SHAREDSECRET_SIZE</link>];

<emphasis role="comment">//&#32;create&#32;the&#32;public&#32;and&#32;secret&#32;keys</emphasis>
qsc_ecdh_generate_seeded_keypair(pk,&#32;sk,&#32;random-seed);

<emphasis role="comment">//&#32;decrypt&#32;the&#32;cipher-text,&#32;and&#32;output&#32;the&#32;shared&#32;key</emphasis>
<emphasis role="keywordflow">if</emphasis>&#32;(qsc_ecdh_key_exchange(sec,&#32;sk,&#32;external-<emphasis role="keyword">public</emphasis>-key)&#32;==&#32;<emphasis role="keyword">false</emphasis>)
{
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;key&#32;exchange&#32;failed,&#32;do&#32;something..</emphasis>
}
</computeroutput></literallayout></para>
</formalpara>
<formalpara><title>Remarks</title>

<para>Reference implementations: LibSodium by Frank Denis &lt;a href=&quot;https://github.com/jedisct1/libsodium&quot; /a&gt; curve25519-donna by Adam Langley &lt;a href=&quot;https://github.com/agl/curve25519-donna&quot; /a&gt; NaCI by Daniel J. Bernstein, Tanja Lange, Peter Schwabe &lt;a href=&quot;https://nacl.cr.yp.to&quot; /a&gt;</para>
</formalpara>
Rewritten for Misra compliance and optimizations by John G. Underhill September 21, 2020 </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_ecdh_8h_1aabc35fd16d6ad86406261a8df6c30d11"/><section>
    <title>qsc_ecdh_generate_keypair()</title>
<indexterm><primary>qsc_ecdh_generate_keypair</primary><secondary>ecdh.h</secondary></indexterm>
<indexterm><primary>ecdh.h</primary><secondary>qsc_ecdh_generate_keypair</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_ecdh_generate_keypair (uint8_t * publickey, uint8_t * privatekey, bool(* rng_generate&#160;)(uint8_t *, size_t))</computeroutput></para><para>

<para>Generates public and private key for the ECDH key encapsulation mechanism. </para>
</para>

<para><warning><title>Warning</title>

<para>Arrays must be sized to QSC_ECDH_PUBLICKEY_SIZE and QSC_ECDH_SECRETKEY_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>publickey</entry><entry>
<para>Pointer to the output public-key array </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>Pointer to output private-key array </para>
</entry>
                            </row>
                            <row>
<entry>rng_generate</entry><entry>
<para>A pointer to the random generator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_ecdh_8h_1a63c73b113069f9817a50eb961f58a42d"/><section>
    <title>qsc_ecdh_generate_seeded_keypair()</title>
<indexterm><primary>qsc_ecdh_generate_seeded_keypair</primary><secondary>ecdh.h</secondary></indexterm>
<indexterm><primary>ecdh.h</primary><secondary>qsc_ecdh_generate_seeded_keypair</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_ecdh_generate_seeded_keypair (uint8_t * publickey, uint8_t * privatekey, const uint8_t * seed)</computeroutput></para><para>

<para>Generates public and private key for the ECDH key encapsulation mechanism. </para>
</para>

<para><warning><title>Warning</title>

<para>Arrays must be sized to QSC_ECDH_PUBLICKEY_SIZE and QSC_ECDH_SECRETKEY_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>publickey</entry><entry>
<para>Pointer to the output public-key array </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>Pointer to output private-key array </para>
</entry>
                            </row>
                            <row>
<entry>seed</entry><entry>
<para>[const] A pointer to the random seed </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_ecdh_8h_1acf8a0dd71a8090717a6958ee1b1103e5"/><section>
    <title>qsc_ecdh_key_exchange()</title>
<indexterm><primary>qsc_ecdh_key_exchange</primary><secondary>ecdh.h</secondary></indexterm>
<indexterm><primary>ecdh.h</primary><secondary>qsc_ecdh_key_exchange</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API bool qsc_ecdh_key_exchange (uint8_t * secret, const uint8_t * privatekey, const uint8_t * publickey)</computeroutput></para><para>

<para>Decapsulates the shared secret for a given cipher-text using a private-key. </para>
</para>

<para><warning><title>Warning</title>

<para>The shared secret array must be sized to the QSC_ECDH_SHAREDSECRET_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>secret</entry><entry>
<para>Pointer to a shared secret key, an array of QSC_ECDH_SHAREDSECRET_SIZE </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>[const] Pointer to the private-key array </para>
</entry>
                            </row>
                            <row>
<entry>publickey</entry><entry>
<para>[const] Pointer to the public-key array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true for success </para>
</formalpara>
</para>
</section>
</section>
</section>
