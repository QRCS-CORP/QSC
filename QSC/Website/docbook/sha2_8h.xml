<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sha2_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/sha2.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/sha2.h</primary></indexterm>
<para>

<para>SHA2 header definition <?linebreak?>Contains the public api and documentation for SHA2 digests, HMAC and HKDF implementations. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structqsc__sha256__state">qsc_sha256_state</link></para>

<para>The SHA2-256 digest state array. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__sha384__state">qsc_sha384_state</link></para>

<para>The SHA2-384 digest state array. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__sha512__state">qsc_sha512_state</link></para>

<para>The SHA2-512 digest state array. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link></para>

<para>The HMAC(SHA2-256) state array. </para>
</listitem>
            <listitem><para>struct <link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link></para>

<para>The HMAC(SHA2-512) state array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_sha2_8h_1a6461b629b7cfb1ad6f070ef522c1eb43"/>#define <emphasis role="strong">QSC_HKDF_256_KEY_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The HKDF-256 key size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1ac255b4d4a0f58638f817b75514c1ed04"/>#define <emphasis role="strong">QSC_HKDF_512_KEY_SIZE</emphasis>&#160;&#160;&#160;64</para>

<para>The HKDF-512 key size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a2ebdd4cd8b5a6a4131a772ff9dc8ba43"/>#define <emphasis role="strong">QSC_HMAC_256_KEY_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The recommended HMAC(SHA2-256) key size, minimum is 32 bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a57d19828a4bf5be5da4f410320599540"/>#define <emphasis role="strong">QSC_HMAC_512_KEY_SIZE</emphasis>&#160;&#160;&#160;64</para>

<para>The recommended HMAC(SHA2-512) key size minimum is 64 bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1aff64f79a8925231ca3ffad45f8974f4f"/>#define <emphasis role="strong">QSC_HMAC_256_MAC_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The HMAC-256 mac-code size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a11d8ada4a34ca95b073395598de77496"/>#define <emphasis role="strong">QSC_HMAC_512_MAC_SIZE</emphasis>&#160;&#160;&#160;64</para>

<para>The HMAC-512 mac-code size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1acc9bc7cab05c51e07a961f781e19d48b"/>#define <emphasis role="strong">QSC_HMAC_256_RATE</emphasis>&#160;&#160;&#160;64</para>

<para>The HMAC-256 input rate size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1ab8f65e5b375efc058079f6eae2591d3d"/>#define <emphasis role="strong">QSC_HMAC_512_RATE</emphasis>&#160;&#160;&#160;128</para>

<para>The HMAC-512 input rate size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a8040542d5326a008843050709070dda9"/>#define <emphasis role="strong">QSC_SHA2_256_HASH_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The SHA2-256 hash size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1afaba48613b15ca13332f9c998bb4302c"/>#define <emphasis role="strong">QSC_SHA2_384_HASH_SIZE</emphasis>&#160;&#160;&#160;48</para>

<para>The SHA2-384 hash size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a6f81762376b25c0d0bbbb1461da19a67"/>#define <emphasis role="strong">QSC_SHA2_512_HASH_SIZE</emphasis>&#160;&#160;&#160;64</para>

<para>The SHA2-512 hash size in bytes. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a798cb6e28a04637a168d2860c29fb176"/>#define <emphasis role="strong">QSC_SHA2_256_RATE</emphasis>&#160;&#160;&#160;64</para>

<para>The SHA-256-bit absorption rate. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1ad6510c65fbebd47f35a76bf54b0f90a6"/>#define <emphasis role="strong">QSC_SHA2_384_RATE</emphasis>&#160;&#160;&#160;128</para>

<para>The SHA-384 byte absorption rate. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1a54cc35812b0c4ba419b3b5e0dca449a7"/>#define <emphasis role="strong">QSC_SHA2_512_RATE</emphasis>&#160;&#160;&#160;128</para>

<para>The SHA2-512-bit absorption rate. </para>
</listitem>
            <listitem><para><anchor xml:id="_sha2_8h_1af98fa11b9259e84c51297c358b51b95e"/>#define <emphasis role="strong">QSC_SHA2_STATE_SIZE</emphasis>&#160;&#160;&#160;8</para>

<para>The SHA2-256 state array size. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1aab92d3ba44d23205bbc65c8f0ec3ea6d">qsc_sha256_compute</link> (uint8_t *output, const uint8_t *message, size_t msglen)</para>

<para>Process a message with SHA2-256 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1ac3632316ad67480584980c8bb38179b7">qsc_sha256_dispose</link> (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> *ctx)</para>

<para>Dispose of the SHA2-256 state. This function destroys the internal state of the cipher. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a08eaea44310521162ad00d2ee8124b08">qsc_sha256_finalize</link> (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the message state and returns the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 32-byte output code. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a50767ebb1872df5f46fd2e9bd4c48519">qsc_sha256_initialize</link> (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> *ctx)</para>

<para>Initializes a SHA2-256 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1adcd579f4556e90b895b419334a4dea62">qsc_sha256_permute</link> (uint32_t *output, const uint8_t *input)</para>

<para>The SHA2-256 permutation function. Internal function: called by protocol hash and generation functions, or in the construction of other external protocols. Absorbs a message and permutes the state array. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a529f8a969165e97c245d5d65172cd634">qsc_sha256_update</link> (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update SHA2-256 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of message input into the hash function. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1afcb6ddfdf25b91161060b57e12d0681d">qsc_sha384_compute</link> (uint8_t *output, const uint8_t *message, size_t msglen)</para>

<para>Process a message with SHA2-384 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a268421256405301a45147f35345e9857">qsc_sha384_dispose</link> (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> *ctx)</para>

<para>Dispose of the SHA2-384 state. This function destroys the internal state of the cipher. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a2336c915a8d35011f64540857ea8e52f">qsc_sha384_finalize</link> (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the message state and returns the SHA2-384 hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 48 byte output code. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a776de2966e9dd981f4c5a1fe49169bf2">qsc_sha384_initialize</link> (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> *ctx)</para>

<para>Initializes a SHA2-384 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a10a98e4b5369abe31c2f2940fc16bb1d">qsc_sha384_update</link> (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update SHA2-384 with blocks of input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of input into the hash function. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a5602305c5a0d7e022c82dfafa25e287f">qsc_sha512_compute</link> (uint8_t *output, const uint8_t *message, size_t msglen)</para>

<para>Process a message with SHA2-512 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1af75dab61a62cddafe5d4a454c711a417">qsc_sha512_dispose</link> (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> *ctx)</para>

<para>Dispose of the SHA2-512 state. This function destroys the internal state of the cipher. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1ada5a6439b4305b0e0e41838d1d58f73e">qsc_sha512_finalize</link> (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the message state and returns the SHA2-512 hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 64 byte output code. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a1191b73605a4f0491279babc53990bcc">qsc_sha512_initialize</link> (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> *ctx)</para>

<para>Initializes a SHA2-512 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1acf8e10cc6b29b94af4989dd5885ed5d5">qsc_sha512_permute</link> (uint64_t *output, const uint8_t *input)</para>

<para>The SHA2-512 permutation function. Internal function: called by protocol hash and generation functions, or in the construction of other external protocols. Absorbs a message and permutes the state array. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1af0a8d6e0e724c05efc797f3e1f199219">qsc_sha512_update</link> (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update SHA2-512 with blocks of input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of input into the hash function. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a91d83a0e076585a28b9d18268b3ca993">qsc_hmac256_compute</link> (uint8_t *output, const uint8_t *message, size_t msglen, const uint8_t *key, size_t keylen)</para>

<para>Process a message with HMAC(SHA2-256) and returns the hash code in the output byte array. Short form api: processes the key and complete message, and generates the MAC code with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1ad19d81e418c12695bc6475f8fa41a87f">qsc_hmac256_dispose</link> (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> *ctx)</para>

<para>Dispose of the HMAC-256 state. This function destroys the internal state of the MAC. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a757cf2ba8342c295b97c11f60507bec8">qsc_hmac256_finalize</link> (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the HMAC-256 message state and return the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 32 byte output code. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a29f09894b361edc0e623308daea5dbbb">qsc_hmac256_initialize</link> (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> *ctx, const uint8_t *key, size_t keylen)</para>

<para>Initializes an HMAC-256 state structure with a key, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a6a46975b7c8e19883cac85e409432881">qsc_hmac256_update</link> (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update HMAC-256 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1ae945ecc86192bedb2a51258404376d6f">qsc_hmac512_compute</link> (uint8_t *output, const uint8_t *message, size_t msglen, const uint8_t *key, size_t keylen)</para>

<para>Process a message with SHA2-512 and returns the hash code in the output byte array. Short form api: processes the key and complete message, and generates the MAC code with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a5b7bed29f22b348a96a7f88b27bda597">qsc_hmac512_dispose</link> (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> *ctx)</para>

<para>Dispose of the HMAC-512 state. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a77dae801c5a93ee3486c07a7a6f085ac">qsc_hmac512_finalize</link> (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> *ctx, uint8_t *output)</para>

<para>Finalize the HMAC-512 message state and return the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 64 byte output code. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a82019377eb632c58b1b4b222d1c3a075">qsc_hmac512_initialize</link> (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> *ctx, const uint8_t *key, size_t keylen)</para>

<para>Initializes an HMAC-512 state structure with a key, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a2d0b2707561bc1405cecc11104c030af">qsc_hmac512_update</link> (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> *ctx, const uint8_t *message, size_t msglen)</para>

<para>Update HMAC-512 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a92dda9601e71e335d76f9e63e9709717">qsc_hkdf256_expand</link> (uint8_t *output, size_t otplen, const uint8_t *key, size_t keylen, const uint8_t *info, size_t infolen)</para>

<para>Initialize an instance of HKDF(HMAC(SHA2-256)), and output an array of pseudo-random. Short form api: initializes with the key and user info, and generates the output pseudo-random with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a1af5af2b784ff891f154b9d78d743021">qsc_hkdf256_extract</link> (uint8_t *output, size_t otplen, const uint8_t *key, size_t keylen, const uint8_t *salt, size_t saltlen)</para>

<para>Extract a key from a combined key and salt input using HMAC(SHA2-256). </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a99d9483d6a75e2cdaf69cdf6592d09df">qsc_hkdf512_expand</link> (uint8_t *output, size_t otplen, const uint8_t *key, size_t keylen, const uint8_t *info, size_t infolen)</para>

<para>Initialize an instance of HKDF(HMAC(SHA2-512)), and output an array of pseudo-random. Short form api: initializes with the key and user info, and generates the output pseudo-random with a single call. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_sha2_8h_1a4a3f2811a273c2d7fc797de97e9e009d">qsc_hkdf512_extract</link> (uint8_t *output, size_t otplen, const uint8_t *key, size_t keylen, const uint8_t *salt, size_t saltlen)</para>

<para>Extract a key from a combined key and salt input using HMAC(SHA2-512). </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>SHA2 header definition <?linebreak?>Contains the public api and documentation for SHA2 digests, HMAC and HKDF implementations. </para>

<para><formalpara><title>Author</title>

<para>John Underhill </para>
</formalpara>
<formalpara><title>Date</title>

<para>May 23, 2019 updated September 12, 2020</para>
</formalpara>
</para>

<para>SHA2-512 hash computation using long-form api <?linebreak?><literallayout><computeroutput><emphasis role="preprocessor">#define&#32;MSGLEN&#32;200</emphasis>
uint8_t&#32;msg[MSGLEN]&#32;=&#32;{&#32;...&#32;};
uint8_t&#32;otp[<link linkend="_sha2_8h_1a6f81762376b25c0d0bbbb1461da19a67">QSC_SHA2_512_HASH_SIZE</link>]&#32;=&#32;{&#32;0&#32;};
<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>&#32;ctx;

qsc_sha512_initialize(&amp;ctx);
qsc_sha512_update(&amp;ctx,&#32;msg,&#32;MSGLEN);
qsc_sha512_finalize(&amp;ctx,&#32;otp);
</computeroutput></literallayout></para>

<para><formalpara><title>Remarks</title>

<para>For usage examples, see sha3_test.h. <?linebreak?> \ section Links NIST: The SHA-2 Standard <link xlink:href="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf</link> <?linebreak?>Analysis of SIMD Applicability to SHA Algorithms <link xlink:href="https://software.intel.com/sites/default/files/m/b/9/b/aciicmez.pdf">https://software.intel.com/sites/default/files/m/b/9/b/aciicmez.pdf</link> <?linebreak?> </para>

<para></para>
</formalpara>
<para>

<para>The SHA2 and HMAC implementations use two different forms of api: short-form and long-form. <?linebreak?>The short-form api, which initializes the state, processes a message, and finalizes by producing output, all in a single function call, for example; <link linkend="_sha2_8h_1a5602305c5a0d7e022c82dfafa25e287f">qsc_sha512_compute(uint8_t* output, const uint8_t* message, size_t msglen)</link>, the entire message array is processed and the hash code is written to the output array. <?linebreak?>The long-form api uses an initialization call to prepare the state, a update call to process the message, and the finalize call, which finalizes the state and generates a hash or mac-code. <?linebreak?>The HKDF key derivation functions HKDF(HMAC(SHA2-256/512)), use only the short-form api, single-call functions, to generate pseudo-random to an output array. <?linebreak?>Each of the function families (SHA2, HMAC, HKDF), have a corresponding set of reference constants associated with that member, example; QSC_HKDF_256_KEY_SIZE is the minimum expected HKDF-256 key size in bytes, QSC_HMAC_512_MAC_SIZE is the minimum size of the HMAC-512 output mac-code output array.</para>
</para>
For additional usage examples, see sha2_test.h </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_sha2_8h_1a92dda9601e71e335d76f9e63e9709717"/><section>
    <title>qsc_hkdf256_expand()</title>
<indexterm><primary>qsc_hkdf256_expand</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hkdf256_expand</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hkdf256_expand (uint8_t * output, size_t otplen, const uint8_t * key, size_t keylen, const uint8_t * info, size_t infolen)</computeroutput></para><para>

<para>Initialize an instance of HKDF(HMAC(SHA2-256)), and output an array of pseudo-random. Short form api: initializes with the key and user info, and generates the output pseudo-random with a single call. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output pseudo-random byte array </para>
</entry>
                            </row>
                            <row>
<entry>otplen</entry><entry>
<para>The output array length </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The HKDF key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>[const] The info array </para>
</entry>
                            </row>
                            <row>
<entry>infolen</entry><entry>
<para>The info array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a1af5af2b784ff891f154b9d78d743021"/><section>
    <title>qsc_hkdf256_extract()</title>
<indexterm><primary>qsc_hkdf256_extract</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hkdf256_extract</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hkdf256_extract (uint8_t * output, size_t otplen, const uint8_t * key, size_t keylen, const uint8_t * salt, size_t saltlen)</computeroutput></para><para>

<para>Extract a key from a combined key and salt input using HMAC(SHA2-256). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output pseudo-random byte array </para>
</entry>
                            </row>
                            <row>
<entry>otplen</entry><entry>
<para>The output array length </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The HKDF key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                            <row>
<entry>salt</entry><entry>
<para>[const] The salt array </para>
</entry>
                            </row>
                            <row>
<entry>saltlen</entry><entry>
<para>The salt array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a99d9483d6a75e2cdaf69cdf6592d09df"/><section>
    <title>qsc_hkdf512_expand()</title>
<indexterm><primary>qsc_hkdf512_expand</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hkdf512_expand</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hkdf512_expand (uint8_t * output, size_t otplen, const uint8_t * key, size_t keylen, const uint8_t * info, size_t infolen)</computeroutput></para><para>

<para>Initialize an instance of HKDF(HMAC(SHA2-512)), and output an array of pseudo-random. Short form api: initializes with the key and user info, and generates the output pseudo-random with a single call. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output pseudo-random byte array </para>
</entry>
                            </row>
                            <row>
<entry>otplen</entry><entry>
<para>The output array length </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The HKDF key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                            <row>
<entry>info</entry><entry>
<para>[const] The info array </para>
</entry>
                            </row>
                            <row>
<entry>infolen</entry><entry>
<para>The info array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a4a3f2811a273c2d7fc797de97e9e009d"/><section>
    <title>qsc_hkdf512_extract()</title>
<indexterm><primary>qsc_hkdf512_extract</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hkdf512_extract</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hkdf512_extract (uint8_t * output, size_t otplen, const uint8_t * key, size_t keylen, const uint8_t * salt, size_t saltlen)</computeroutput></para><para>

<para>Extract a key from a combined key and salt input using HMAC(SHA2-512). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output pseudo-random byte array </para>
</entry>
                            </row>
                            <row>
<entry>otplen</entry><entry>
<para>The output array length </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The HKDF key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                            <row>
<entry>salt</entry><entry>
<para>[const] The salt array </para>
</entry>
                            </row>
                            <row>
<entry>saltlen</entry><entry>
<para>The salt array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a91d83a0e076585a28b9d18268b3ca993"/><section>
    <title>qsc_hmac256_compute()</title>
<indexterm><primary>qsc_hmac256_compute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac256_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac256_compute (uint8_t * output, const uint8_t * message, size_t msglen, const uint8_t * key, size_t keylen)</computeroutput></para><para>

<para>Process a message with HMAC(SHA2-256) and returns the hash code in the output byte array. Short form api: processes the key and complete message, and generates the MAC code with a single call. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 32 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The secret key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1ad19d81e418c12695bc6475f8fa41a87f"/><section>
    <title>qsc_hmac256_dispose()</title>
<indexterm><primary>qsc_hmac256_dispose</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac256_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac256_dispose (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the HMAC-256 state. This function destroys the internal state of the MAC. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a757cf2ba8342c295b97c11f60507bec8"/><section>
    <title>qsc_hmac256_finalize()</title>
<indexterm><primary>qsc_hmac256_finalize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac256_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac256_finalize (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the HMAC-256 message state and return the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 32 byte output code. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be sized correctly. Finalizes the message state, can not be used in consecutive calls. State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a29f09894b361edc0e623308daea5dbbb"/><section>
    <title>qsc_hmac256_initialize()</title>
<indexterm><primary>qsc_hmac256_initialize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac256_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac256_initialize (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> * ctx, const uint8_t * key, size_t keylen)</computeroutput></para><para>

<para>Initializes an HMAC-256 state structure with a key, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The secret key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a6a46975b7c8e19883cac85e409432881"/><section>
    <title>qsc_hmac256_update()</title>
<indexterm><primary>qsc_hmac256_update</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac256_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac256_update (<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update HMAC-256 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. </para>
</para>

<para>State must be initialized by the caller.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1ae945ecc86192bedb2a51258404376d6f"/><section>
    <title>qsc_hmac512_compute()</title>
<indexterm><primary>qsc_hmac512_compute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac512_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac512_compute (uint8_t * output, const uint8_t * message, size_t msglen, const uint8_t * key, size_t keylen)</computeroutput></para><para>

<para>Process a message with SHA2-512 and returns the hash code in the output byte array. Short form api: processes the key and complete message, and generates the MAC code with a single call. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 128 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The secret key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a5b7bed29f22b348a96a7f88b27bda597"/><section>
    <title>qsc_hmac512_dispose()</title>
<indexterm><primary>qsc_hmac512_dispose</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac512_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac512_dispose (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the HMAC-512 state. </para>
</para>

<para><warning><title>Warning</title>

<para>The dispose function must be called when disposing of the cipher. This function destroys the internal state of the cipher.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a77dae801c5a93ee3486c07a7a6f085ac"/><section>
    <title>qsc_hmac512_finalize()</title>
<indexterm><primary>qsc_hmac512_finalize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac512_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac512_finalize (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the HMAC-512 message state and return the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 64 byte output code. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be sized correctly. Finalizes the message state, can not be used in consecutive calls. State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a82019377eb632c58b1b4b222d1c3a075"/><section>
    <title>qsc_hmac512_initialize()</title>
<indexterm><primary>qsc_hmac512_initialize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac512_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac512_initialize (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> * ctx, const uint8_t * key, size_t keylen)</computeroutput></para><para>

<para>Initializes an HMAC-512 state structure with a key, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>[const] The secret key array </para>
</entry>
                            </row>
                            <row>
<entry>keylen</entry><entry>
<para>The key array length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a2d0b2707561bc1405cecc11104c030af"/><section>
    <title>qsc_hmac512_update()</title>
<indexterm><primary>qsc_hmac512_update</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_hmac512_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_hmac512_update (<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update HMAC-512 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. </para>
</para>

<para>State must be initialized by the caller.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1aab92d3ba44d23205bbc65c8f0ec3ea6d"/><section>
    <title>qsc_sha256_compute()</title>
<indexterm><primary>qsc_sha256_compute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_compute (uint8_t * output, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Process a message with SHA2-256 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 32 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1ac3632316ad67480584980c8bb38179b7"/><section>
    <title>qsc_sha256_dispose()</title>
<indexterm><primary>qsc_sha256_dispose</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_dispose (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the SHA2-256 state. This function destroys the internal state of the cipher. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a08eaea44310521162ad00d2ee8124b08"/><section>
    <title>qsc_sha256_finalize()</title>
<indexterm><primary>qsc_sha256_finalize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_finalize (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the message state and returns the hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 32-byte output code. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be sized correctly. Finalizes the message state, can not be used in consecutive calls. State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a50767ebb1872df5f46fd2e9bd4c48519"/><section>
    <title>qsc_sha256_initialize()</title>
<indexterm><primary>qsc_sha256_initialize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_initialize (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> * ctx)</computeroutput></para><para>

<para>Initializes a SHA2-256 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1adcd579f4556e90b895b419334a4dea62"/><section>
    <title>qsc_sha256_permute()</title>
<indexterm><primary>qsc_sha256_permute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_permute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_permute (uint32_t * output, const uint8_t * input)</computeroutput></para><para>

<para>The SHA2-256 permutation function. Internal function: called by protocol hash and generation functions, or in the construction of other external protocols. Absorbs a message and permutes the state array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The function output; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a529f8a969165e97c245d5d65172cd634"/><section>
    <title>qsc_sha256_update()</title>
<indexterm><primary>qsc_sha256_update</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha256_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha256_update (<link linkend="_structqsc__sha256__state">qsc_sha256_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update SHA2-256 with message input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of message input into the hash function. </para>
</para>

<para><warning><title>Warning</title>

<para>State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1afcb6ddfdf25b91161060b57e12d0681d"/><section>
    <title>qsc_sha384_compute()</title>
<indexterm><primary>qsc_sha384_compute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha384_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha384_compute (uint8_t * output, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Process a message with SHA2-384 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 48 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a268421256405301a45147f35345e9857"/><section>
    <title>qsc_sha384_dispose()</title>
<indexterm><primary>qsc_sha384_dispose</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha384_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha384_dispose (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the SHA2-384 state. This function destroys the internal state of the cipher. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a2336c915a8d35011f64540857ea8e52f"/><section>
    <title>qsc_sha384_finalize()</title>
<indexterm><primary>qsc_sha384_finalize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha384_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha384_finalize (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the message state and returns the SHA2-384 hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 48 byte output code. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be sized correctly. Finalizes the message state, can not be used in consecutive calls. State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a776de2966e9dd981f4c5a1fe49169bf2"/><section>
    <title>qsc_sha384_initialize()</title>
<indexterm><primary>qsc_sha384_initialize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha384_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha384_initialize (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> * ctx)</computeroutput></para><para>

<para>Initializes a SHA2-384 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a10a98e4b5369abe31c2f2940fc16bb1d"/><section>
    <title>qsc_sha384_update()</title>
<indexterm><primary>qsc_sha384_update</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha384_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha384_update (<link linkend="_structqsc__sha384__state">qsc_sha384_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update SHA2-384 with blocks of input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of input into the hash function. </para>
</para>

<para><warning><title>Warning</title>

<para>State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a5602305c5a0d7e022c82dfafa25e287f"/><section>
    <title>qsc_sha512_compute()</title>
<indexterm><primary>qsc_sha512_compute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_compute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_compute (uint8_t * output, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Process a message with SHA2-512 and returns the hash code in the output byte array. Short form api: processes the entire message and computes the hash code with a single call. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be at least 64 bytes in length.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The message input byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1af75dab61a62cddafe5d4a454c711a417"/><section>
    <title>qsc_sha512_dispose()</title>
<indexterm><primary>qsc_sha512_dispose</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_dispose</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_dispose (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> * ctx)</computeroutput></para><para>

<para>Dispose of the SHA2-512 state. This function destroys the internal state of the cipher. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The cipher state structure </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1ada5a6439b4305b0e0e41838d1d58f73e"/><section>
    <title>qsc_sha512_finalize()</title>
<indexterm><primary>qsc_sha512_finalize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_finalize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_finalize (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> * ctx, uint8_t * output)</computeroutput></para><para>

<para>Finalize the message state and returns the SHA2-512 hash value in output. Long form api: must be used in conjunction with the initialize and update functions. Produces a 64 byte output code. </para>
</para>

<para><warning><title>Warning</title>

<para>The output array must be sized correctly. Finalizes the message state, can not be used in consecutive calls. State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>output</entry><entry>
<para>The output byte array; receives the hash code </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1a1191b73605a4f0491279babc53990bcc"/><section>
    <title>qsc_sha512_initialize()</title>
<indexterm><primary>qsc_sha512_initialize</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_initialize</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_initialize (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> * ctx)</computeroutput></para><para>

<para>Initializes a SHA2-512 state structure, must be called before message processing. Long form api: must be used in conjunction with the update and finalize functions. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1acf8e10cc6b29b94af4989dd5885ed5d5"/><section>
    <title>qsc_sha512_permute()</title>
<indexterm><primary>qsc_sha512_permute</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_permute</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_permute (uint64_t * output, const uint8_t * input)</computeroutput></para><para>

<para>The SHA2-512 permutation function. Internal function: called by protocol hash and generation functions, or in the construction of other external protocols. Absorbs a message and permutes the state array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>output</entry><entry>
<para>The function output; must be initialized </para>
</entry>
                            </row>
                            <row>
<entry>input</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_sha2_8h_1af0a8d6e0e724c05efc797f3e1f199219"/><section>
    <title>qsc_sha512_update()</title>
<indexterm><primary>qsc_sha512_update</primary><secondary>sha2.h</secondary></indexterm>
<indexterm><primary>sha2.h</primary><secondary>qsc_sha512_update</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_sha512_update (<link linkend="_structqsc__sha512__state">qsc_sha512_state</link> * ctx, const uint8_t * message, size_t msglen)</computeroutput></para><para>

<para>Update SHA2-512 with blocks of input. Long form api: must be used in conjunction with the initialize and finalize functions. Absorbs a length of input into the hash function. </para>
</para>

<para><warning><title>Warning</title>

<para>State must be initialized by the caller.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ctx</entry><entry>
<para>[struct] The function state </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>[const] The input message byte array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The number of message bytes to process </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
