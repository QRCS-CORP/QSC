<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_falconbase__avx2_8h_source" xml:lang="en-US">
<title>falconbase_avx2.h</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/falconbase_avx2.h</primary></indexterm>
<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;2025&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation</emphasis>
2 <emphasis role="comment">&#32;*&#32;All&#32;Rights&#32;Reserved.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;NOTICE:&#32;This&#32;software&#32;and&#32;all&#32;accompanying&#32;materials&#32;are&#32;the&#32;exclusive&#32;</emphasis>
5 <emphasis role="comment">&#32;*&#32;property&#32;of&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation&#32;(QRCS).</emphasis>
6 <emphasis role="comment">&#32;*&#32;The&#32;intellectual&#32;and&#32;technical&#32;concepts&#32;contained&#32;within&#32;this&#32;implementation&#32;</emphasis>
7 <emphasis role="comment">&#32;*&#32;are&#32;proprietary&#32;to&#32;QRCS&#32;and&#32;its&#32;authorized&#32;licensors&#32;and&#32;are&#32;protected&#32;under&#32;</emphasis>
8 <emphasis role="comment">&#32;*&#32;applicable&#32;U.S.&#32;and&#32;international&#32;copyright,&#32;patent,&#32;and&#32;trade&#32;secret&#32;laws.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;CRYPTOGRAPHIC&#32;STANDARDS:</emphasis>
11 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;includes&#32;implementations&#32;of&#32;cryptographic&#32;algorithms&#32;such&#32;as&#32;</emphasis>
12 <emphasis role="comment">&#32;*&#32;&#32;&#32;SHA3,&#32;AES,&#32;and&#32;others.&#32;These&#32;algorithms&#32;are&#32;public&#32;domain&#32;or&#32;standardized&#32;</emphasis>
13 <emphasis role="comment">&#32;*&#32;&#32;&#32;by&#32;organizations&#32;such&#32;as&#32;NIST&#32;and&#32;are&#32;NOT&#32;the&#32;property&#32;of&#32;QRCS.</emphasis>
14 <emphasis role="comment">&#32;*&#32;-&#32;However,&#32;all&#32;source&#32;code,&#32;optimizations,&#32;and&#32;implementations&#32;in&#32;this&#32;library&#32;</emphasis>
15 <emphasis role="comment">&#32;*&#32;&#32;&#32;are&#32;original&#32;works&#32;of&#32;QRCS&#32;and&#32;are&#32;protected&#32;under&#32;this&#32;license.</emphasis>
16 <emphasis role="comment">&#32;*</emphasis>
17 <emphasis role="comment">&#32;*&#32;RESTRICTIONS:</emphasis>
18 <emphasis role="comment">&#32;*&#32;-&#32;Redistribution,&#32;modification,&#32;or&#32;unauthorized&#32;distribution&#32;of&#32;this&#32;software,&#32;</emphasis>
19 <emphasis role="comment">&#32;*&#32;&#32;&#32;in&#32;whole&#32;or&#32;in&#32;part,&#32;is&#32;strictly&#32;prohibited.</emphasis>
20 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;is&#32;provided&#32;for&#32;non-commercial,&#32;educational,&#32;and&#32;research&#32;</emphasis>
21 <emphasis role="comment">&#32;*&#32;&#32;&#32;purposes&#32;only.&#32;Commercial&#32;use&#32;in&#32;any&#32;form&#32;is&#32;expressly&#32;forbidden.</emphasis>
22 <emphasis role="comment">&#32;*&#32;-&#32;Licensing&#32;and&#32;authorized&#32;distribution&#32;are&#32;solely&#32;at&#32;the&#32;discretion&#32;of&#32;QRCS.</emphasis>
23 <emphasis role="comment">&#32;*&#32;-&#32;Any&#32;use&#32;of&#32;this&#32;software&#32;implies&#32;acceptance&#32;of&#32;these&#32;restrictions.</emphasis>
24 <emphasis role="comment">&#32;*</emphasis>
25 <emphasis role="comment">&#32;*&#32;DISCLAIMER:</emphasis>
26 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as&#32;is,&quot;&#32;without&#32;warranty&#32;of&#32;any&#32;kind,&#32;express&#32;or&#32;</emphasis>
27 <emphasis role="comment">&#32;*&#32;implied,&#32;including&#32;but&#32;not&#32;limited&#32;to&#32;warranties&#32;of&#32;merchantability&#32;or&#32;fitness&#32;</emphasis>
28 <emphasis role="comment">&#32;*&#32;for&#32;a&#32;particular&#32;purpose.&#32;QRCS&#32;disclaims&#32;all&#32;liability&#32;for&#32;any&#32;direct,&#32;indirect,&#32;</emphasis>
29 <emphasis role="comment">&#32;*&#32;incidental,&#32;or&#32;consequential&#32;damages&#32;resulting&#32;from&#32;the&#32;use&#32;or&#32;misuse&#32;of&#32;this&#32;software.</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;FULL&#32;LICENSE:</emphasis>
32 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;subject&#32;to&#32;the&#32;**Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;</emphasis>
33 <emphasis role="comment">&#32;*&#32;Proprietary&#32;License&#32;(QRCS-PL)**.&#32;The&#32;complete&#32;license&#32;terms&#32;are&#32;included&#32;</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;the&#32;LICENSE.txt&#32;file&#32;distributed&#32;with&#32;this&#32;software.</emphasis>
35 <emphasis role="comment">&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;Written&#32;by:&#32;John&#32;G.&#32;Underhill</emphasis>
37 <emphasis role="comment">&#32;*&#32;Contact:&#32;john.underhill@protonmail.com</emphasis>
38 <emphasis role="comment">&#32;*/</emphasis>
39 
40 
41 <emphasis role="preprocessor">#ifndef&#32;QSC_FALCONBASE_AVX2_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;QSC_FALCONBASE_AVX2_H</emphasis>
43 
44 <emphasis role="comment">/*&#32;\cond&#32;DOXYGEN_IGNORE&#32;*/</emphasis>
45 
46 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
47 
48 <emphasis role="preprocessor">#if&#32;defined(QSC_SYSTEM_HAS_AVX2)</emphasis>
49 
50 <emphasis role="preprocessor">#include&#32;&quot;intrinsics.h&quot;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_sha3_8h">sha3.h</link>&quot;</emphasis>
52 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
53 
54 <emphasis role="comment">/*&#32;api.h&#32;*/</emphasis>
55 
56 <emphasis role="preprocessor">#if&#32;defined(QSC_FALCON_S3SHAKE256F512)</emphasis>
57 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_SECRETKEYBYTES&#32;1281</emphasis>
58 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_PUBLICKEYBYTES&#32;897</emphasis>
59 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_BYTES&#32;690</emphasis>
60 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_ALGNAME&#32;&quot;Falcon-512&quot;</emphasis>
61 <emphasis role="preprocessor">#elif&#32;defined(QSC_FALCON_S5SHAKE256F1024)</emphasis>
62 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_SECRETKEYBYTES&#32;2305</emphasis>
63 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_PUBLICKEYBYTES&#32;1793</emphasis>
64 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_BYTES&#32;1330</emphasis>
65 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;CRYPTO_ALGNAME&#32;&quot;Falcon-1024&quot;</emphasis>
66 <emphasis role="preprocessor">#endif</emphasis>
67 
68 <emphasis role="comment">/*&#32;falcon_fpr.h&#32;*/</emphasis>
69 
70 <emphasis role="preprocessor">#define&#32;FALCON_FPR_GM_TAB_SIZE&#32;2048</emphasis>
71 <emphasis role="preprocessor">#define&#32;FALCON_FPR_INV_SIGMA_SIZE&#32;11</emphasis>
72 <emphasis role="preprocessor">#define&#32;FALCON_FPR_GM_P2_SIZE&#32;11</emphasis>
73 <emphasis role="preprocessor">#define&#32;FALCON_Q&#32;12289</emphasis>
74 <emphasis role="preprocessor">#define&#32;FALCON_Q0I&#32;12287</emphasis>
75 <emphasis role="preprocessor">#define&#32;FALCON_R&#32;4091</emphasis>
76 <emphasis role="preprocessor">#define&#32;FALCON_R2&#32;10952</emphasis>
77 <emphasis role="preprocessor">#define&#32;FALCON_GMB_SIZE&#32;1024</emphasis>
78 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_1&#32;136</emphasis>
79 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_2&#32;272</emphasis>
80 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_3&#32;224</emphasis>
81 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_4&#32;448</emphasis>
82 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_5&#32;896</emphasis>
83 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_6&#32;1792</emphasis>
84 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_7&#32;3584</emphasis>
85 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_8&#32;7168</emphasis>
86 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_9&#32;14336</emphasis>
87 <emphasis role="preprocessor">#define&#32;FALCON_KEYGEN_TEMP_10&#32;28672</emphasis>
88 <emphasis role="preprocessor">#define&#32;FALCON_SMALL_PRIME_SIZE&#32;522</emphasis>
89 <emphasis role="preprocessor">#define&#32;FALCON_GAUS_1024_12289_SIZE&#32;27</emphasis>
90 <emphasis role="preprocessor">#define&#32;FALCON_MAX_BL_SMALL_SIZE&#32;11</emphasis>
91 <emphasis role="preprocessor">#define&#32;FALCON_MAX_BL_LARGE_SIZE&#32;10</emphasis>
92 <emphasis role="preprocessor">#define&#32;FALCON_DEPTH_INT_FG&#32;4</emphasis>
93 <emphasis role="preprocessor">#define&#32;FALCON_NONCE_SIZE&#32;40</emphasis>
94 <emphasis role="preprocessor">#define&#32;FALCON_L2BOUND_SIZE&#32;11</emphasis>
95 <emphasis role="preprocessor">#define&#32;FALCON_MAXBITS_SIZE&#32;11</emphasis>
96 <emphasis role="preprocessor">#define&#32;FALCON_REV10_SIZE&#32;1024</emphasis>
97 
98 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)</emphasis>
99 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;defined(FALCON_FMA)</emphasis>
100 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;FALCON_TARGET_AVX2&#32;__attribute__((target(&quot;avx2,fma&quot;)))</emphasis>
101 <emphasis role="preprocessor">#&#32;&#32;&#32;else</emphasis>
102 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;FALCON_TARGET_AVX2&#32;__attribute__((target(&quot;avx2&quot;)))</emphasis>
103 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
104 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
105 <emphasis role="preprocessor">#&#32;&#32;&#32;define&#32;FALCON_TARGET_AVX2</emphasis>
106 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;warning(&#32;disable&#32;:&#32;4752&#32;)</emphasis>
107 <emphasis role="preprocessor">#endif</emphasis>
108 
109 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;__m256d&#32;falcon_fmadd(__m256d&#32;a,&#32;__m256d&#32;b,&#32;__m256d&#32;c)
110 {
111 <emphasis role="preprocessor">#if&#32;defined(FALCON_FMA)</emphasis>
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_fmadd_pd(a,&#32;b,&#32;c);
113 <emphasis role="preprocessor">#else</emphasis>
114 &#32;&#32;&#32;&#32;__m256d&#32;tmp;
115 &#32;&#32;&#32;&#32;tmp&#32;=&#32;_mm256_mul_pd(a,&#32;b);
116 &#32;&#32;&#32;&#32;tmp&#32;=&#32;_mm256_add_pd(tmp,&#32;c);
117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tmp;
118 <emphasis role="preprocessor">#endif</emphasis>
119 }
120 
121 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;__m256d&#32;falcon_fmsub(__m256d&#32;a,&#32;__m256d&#32;b,&#32;__m256d&#32;c)
122 {
123 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Note&#32;artifact,&#32;unused&#32;function&#32;*/</emphasis>
124 <emphasis role="preprocessor">#if&#32;defined(FALCON_FMA)</emphasis>
125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_fmsub_pd(a,&#32;b,&#32;c);
126 <emphasis role="preprocessor">#else</emphasis>
127 &#32;&#32;&#32;&#32;__m256d&#32;tmp;
128 &#32;&#32;&#32;&#32;tmp&#32;=&#32;_mm256_mul_pd(a,&#32;b);
129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm256_sub_pd(tmp,&#32;c);
130 <emphasis role="preprocessor">#endif</emphasis>
131 }
132 
133 <emphasis role="comment">//inline&#32;static&#32;uint32_t&#32;falcon_set_fpu_cw(uint32_t&#32;x)</emphasis>
134 <emphasis role="comment">//{</emphasis>
135 <emphasis role="comment">//#if&#32;defined&#32;__GNUC__&#32;&amp;&amp;&#32;defined&#32;__i386__</emphasis>
136 <emphasis role="comment">//&#32;&#32;uint32_t&#32;short&#32;t;</emphasis>
137 <emphasis role="comment">//&#32;&#32;uint32_t&#32;old;</emphasis>
138 <emphasis role="comment">//</emphasis>
139 <emphasis role="comment">//&#32;&#32;__asm__&#32;__volatile__(&quot;fstcw&#32;%0&quot;&#32;:&#32;&quot;=m&quot;&#32;(t)&#32;:&#32;:&#32;);</emphasis>
140 <emphasis role="comment">//&#32;&#32;old&#32;=&#32;(t&#32;&amp;&#32;0x0300u)&#32;&gt;&gt;&#32;8;</emphasis>
141 <emphasis role="comment">//&#32;&#32;t&#32;=&#32;(uint32_t&#32;short)((t&#32;&amp;&#32;~0x0300u)&#32;|&#32;(x&#32;&lt;&lt;&#32;8));</emphasis>
142 <emphasis role="comment">//&#32;&#32;__asm__&#32;__volatile__(&quot;fldcw&#32;%0&quot;&#32;:&#32;:&#32;&quot;m&quot;&#32;(t)&#32;:&#32;);</emphasis>
143 <emphasis role="comment">//&#32;&#32;return&#32;old;</emphasis>
144 <emphasis role="comment">//#elif&#32;defined&#32;_M_IX86</emphasis>
145 <emphasis role="comment">//&#32;&#32;uint32_t&#32;short&#32;t;</emphasis>
146 <emphasis role="comment">//&#32;&#32;uint32_t&#32;old;</emphasis>
147 <emphasis role="comment">//</emphasis>
148 <emphasis role="comment">//&#32;&#32;__asm&#32;{&#32;fstcw&#32;t&#32;}</emphasis>
149 <emphasis role="comment">//&#32;&#32;old&#32;=&#32;(t&#32;&amp;&#32;0x0300u)&#32;&gt;&gt;&#32;8;</emphasis>
150 <emphasis role="comment">//&#32;&#32;t&#32;=&#32;(uint32_t&#32;short)((t&#32;&amp;&#32;~0x0300u)&#32;|&#32;(x&#32;&lt;&lt;&#32;8));</emphasis>
151 <emphasis role="comment">//&#32;&#32;__asm&#32;{&#32;fldcw&#32;t&#32;}</emphasis>
152 <emphasis role="comment">//&#32;&#32;return&#32;old;</emphasis>
153 <emphasis role="comment">//#else</emphasis>
154 <emphasis role="comment">//&#32;&#32;return&#32;x;</emphasis>
155 <emphasis role="comment">//#endif</emphasis>
156 <emphasis role="comment">//}</emphasis>
157 
158 <emphasis role="comment">/*</emphasis>
159 <emphasis role="comment">&#32;*&#32;For&#32;optimal&#32;reproducibility&#32;of&#32;values,&#32;we&#32;need&#32;to&#32;disable&#32;contraction</emphasis>
160 <emphasis role="comment">&#32;*&#32;of&#32;floating-point&#32;expressions;&#32;otherwise,&#32;on&#32;some&#32;architectures&#32;(e.g.</emphasis>
161 <emphasis role="comment">&#32;*&#32;PowerPC),&#32;the&#32;compiler&#32;may&#32;generate&#32;fused-multiply-add&#32;opcodes&#32;that</emphasis>
162 <emphasis role="comment">&#32;*&#32;may&#32;round&#32;differently&#32;than&#32;two&#32;successive&#32;separate&#32;opcodes.&#32;C99&#32;defines</emphasis>
163 <emphasis role="comment">&#32;*&#32;a&#32;standard&#32;pragma&#32;for&#32;that,&#32;but&#32;GCC-6.2.2&#32;appears&#32;to&#32;ignore&#32;it,</emphasis>
164 <emphasis role="comment">&#32;*&#32;hence&#32;the&#32;GCC-specific&#32;pragma&#32;(that&#32;Clang&#32;does&#32;not&#32;support).</emphasis>
165 <emphasis role="comment">&#32;*/</emphasis>
166 <emphasis role="preprocessor">#if&#32;defined&#32;__clang__</emphasis>
167 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;STDC&#32;FP_CONTRACT&#32;OFF</emphasis>
168 <emphasis role="preprocessor">#elif&#32;defined&#32;__GNUC__</emphasis>
169 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;GCC&#32;optimize&#32;(&quot;fp-contract=off&quot;)</emphasis>
170 <emphasis role="preprocessor">#endif</emphasis>
171 
172 &#32;<emphasis role="comment">/*&#32;prng.c&#32;*/</emphasis>
173 
174 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
175 {
176 &#32;&#32;&#32;&#32;QSC_ALIGN(8)&#32;uint8_t&#32;buf[512];
177 &#32;&#32;&#32;&#32;QSC_ALIGN(8)&#32;uint8_t&#32;state[256];
178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;ptr;
179 &#32;&#32;&#32;&#32;int32_t&#32;type;
180 }&#32;falcon_prng_state;
181 
182 inline&#32;static&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_chacha_round(uint32_t&#32;state[16],&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;b,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;c,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;d)
183 {
184 &#32;&#32;&#32;&#32;state[a]&#32;+=&#32;state[b];
185 &#32;&#32;&#32;&#32;state[d]&#32;^=&#32;state[a];
186 &#32;&#32;&#32;&#32;state[d]&#32;=&#32;(state[d]&#32;&lt;&lt;&#32;16)&#32;|&#32;(state[d]&#32;&gt;&gt;&#32;16);
187 &#32;&#32;&#32;&#32;state[c]&#32;+=&#32;state[d];
188 &#32;&#32;&#32;&#32;state[b]&#32;^=&#32;state[c];
189 &#32;&#32;&#32;&#32;state[b]&#32;=&#32;(state[b]&#32;&lt;&lt;&#32;12)&#32;|&#32;(state[b]&#32;&gt;&gt;&#32;20);
190 &#32;&#32;&#32;&#32;state[a]&#32;+=&#32;state[b];
191 &#32;&#32;&#32;&#32;state[d]&#32;^=&#32;state[a];
192 &#32;&#32;&#32;&#32;state[d]&#32;=&#32;(state[d]&#32;&lt;&lt;&#32;8)&#32;|&#32;(state[d]&#32;&gt;&gt;&#32;24);
193 &#32;&#32;&#32;&#32;state[c]&#32;+=&#32;state[d];
194 &#32;&#32;&#32;&#32;state[b]&#32;^=&#32;state[c];
195 &#32;&#32;&#32;&#32;state[b]&#32;=&#32;(state[b]&#32;&lt;&lt;&#32;7)&#32;|&#32;(state[b]&#32;&gt;&gt;&#32;25);
196 }
197 
198 <emphasis role="comment">/*</emphasis>
199 <emphasis role="comment">&#32;*&#32;We&#32;wrap&#32;the&#32;native&#32;&apos;double&apos;&#32;type&#32;into&#32;a&#32;structure&#32;so&#32;that&#32;the&#32;C&#32;compiler</emphasis>
200 <emphasis role="comment">&#32;*&#32;complains&#32;if&#32;we&#32;inadvertently&#32;use&#32;raw&#32;arithmetic&#32;operators&#32;on&#32;the&#32;&apos;falcon_fpr&apos;</emphasis>
201 <emphasis role="comment">&#32;*&#32;type&#32;instead&#32;of&#32;using&#32;the&#32;inline&#32;functions&#32;below.&#32;This&#32;should&#32;have&#32;no</emphasis>
202 <emphasis role="comment">&#32;*&#32;extra&#32;runtime&#32;cost,&#32;since&#32;all&#32;the&#32;functions&#32;below&#32;are&#32;&apos;inline&apos;.</emphasis>
203 <emphasis role="comment">&#32;*/</emphasis>
204 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{&#32;<emphasis role="keywordtype">double</emphasis>&#32;v;&#32;}&#32;falcon_fpr;
205 
206 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_q&#32;=&#32;{&#32;12289.0&#32;};
207 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_inverse_of_q&#32;=&#32;{&#32;1.0&#32;/&#32;12289.0&#32;};
208 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_inv_2sqrsigma0&#32;=&#32;{&#32;0.150865048875372721532312163019&#32;};
209 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_log2&#32;=&#32;{&#32;0.69314718055994530941723212146&#32;};
210 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_inv_log2&#32;=&#32;{&#32;1.4426950408889634073599246810&#32;};
211 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_bnorm_max&#32;=&#32;{&#32;16822.4121&#32;};
212 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_zero&#32;=&#32;{&#32;0.0&#32;};
213 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_one&#32;=&#32;{&#32;1.0&#32;};
214 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_two&#32;=&#32;{&#32;2.0&#32;};
215 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_onehalf&#32;=&#32;{&#32;0.5&#32;};
216 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_invsqrt2&#32;=&#32;{&#32;0.707106781186547524400844362105&#32;};
217 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_invsqrt8&#32;=&#32;{&#32;0.353553390593273762200422181052&#32;};
218 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_ptwo31&#32;=&#32;{&#32;2147483648.0&#32;};
219 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_ptwo31m1&#32;=&#32;{&#32;2147483647.0&#32;};
220 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_mtwo31m1&#32;=&#32;{&#32;-2147483647.0&#32;};
221 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_ptwo63m1&#32;=&#32;{&#32;9223372036854775807.0&#32;};
222 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_mtwo63m1&#32;=&#32;{&#32;-9223372036854775807.0&#32;};
223 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_fpr_ptwo63&#32;=&#32;{&#32;9223372036854775808.0&#32;};
224 
225 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_avx2_fpr_inv_sigma[FALCON_FPR_INV_SIGMA_SIZE];
226 
227 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_avx2_fpr_sigma_min[FALCON_FPR_INV_SIGMA_SIZE];
228 
229 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_avx2_fpr_gm_tab[FALCON_FPR_GM_TAB_SIZE];
230 
231 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_fpr&#32;falcon_avx2_fpr_p2_tab[FALCON_FPR_GM_P2_SIZE];
232 
233 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_FPR(<emphasis role="keywordtype">double</emphasis>&#32;v)
234 {
235 &#32;&#32;&#32;&#32;falcon_fpr&#32;x&#32;=&#32;{&#32;0&#32;};
236 
237 &#32;&#32;&#32;&#32;x.v&#32;=&#32;v;
238 
239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
240 }
241 
242 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_of(int64_t&#32;i)
243 {
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR((<emphasis role="keywordtype">double</emphasis>)i);
245 }
246 
247 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;int64_t&#32;falcon_fpr_rint(falcon_fpr&#32;x)
248 {
249 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
250 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;We&#32;do&#32;not&#32;want&#32;to&#32;use&#32;llrint()&#32;since&#32;it&#32;might&#32;be&#32;not</emphasis>
251 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;constant-time.</emphasis>
252 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
253 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Suppose&#32;that&#32;x&#32;&gt;=&#32;0.&#32;If&#32;x&#32;&gt;=&#32;2^52,&#32;then&#32;it&#32;is&#32;already&#32;an</emphasis>
254 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;integer.&#32;Otherwise,&#32;if&#32;x&#32;&lt;&#32;2^52,&#32;then&#32;computing&#32;x+2^52&#32;will</emphasis>
255 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;yield&#32;a&#32;value&#32;that&#32;will&#32;be&#32;rounded&#32;to&#32;the&#32;nearest&#32;integer</emphasis>
256 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;with&#32;exactly&#32;the&#32;right&#32;rules&#32;(round-to-nearest-even).</emphasis>
257 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
258 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;In&#32;order&#32;to&#32;have&#32;constant-time&#32;processing,&#32;we&#32;must&#32;do&#32;the</emphasis>
259 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;computation&#32;for&#32;both&#32;x&#32;&gt;=&#32;0&#32;and&#32;x&#32;&lt;&#32;0&#32;cases,&#32;and&#32;use&#32;a</emphasis>
260 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;cast&#32;to&#32;an&#32;integer&#32;to&#32;access&#32;the&#32;sign&#32;and&#32;select&#32;the&#32;proper</emphasis>
261 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;value.&#32;Such&#32;casts&#32;also&#32;allow&#32;us&#32;to&#32;find&#32;out&#32;if&#32;|x|&#32;&lt;&#32;2^52.</emphasis>
262 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
263 &#32;&#32;&#32;&#32;int64_t&#32;sx,&#32;tx,&#32;rp,&#32;rn,&#32;m;
264 &#32;&#32;&#32;&#32;uint32_t&#32;ub;
265 
266 &#32;&#32;&#32;&#32;sx&#32;=&#32;(int64_t)(x.v&#32;-&#32;1.0);
267 &#32;&#32;&#32;&#32;tx&#32;=&#32;(int64_t)x.v;
268 &#32;&#32;&#32;&#32;rp&#32;=&#32;(int64_t)(x.v&#32;+&#32;4503599627370496.0)&#32;-&#32;4503599627370496;
269 &#32;&#32;&#32;&#32;rn&#32;=&#32;(int64_t)(x.v&#32;-&#32;4503599627370496.0)&#32;+&#32;4503599627370496;
270 
271 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
272 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;tx&#32;&gt;=&#32;2^52&#32;or&#32;tx&#32;&lt;&#32;-2^52,&#32;then&#32;result&#32;is&#32;tx.</emphasis>
273 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Otherwise,&#32;if&#32;sx&#32;&gt;=&#32;0,&#32;then&#32;result&#32;is&#32;rp.</emphasis>
274 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Otherwise,&#32;result&#32;is&#32;rn.&#32;We&#32;use&#32;the&#32;fact&#32;that&#32;when&#32;x&#32;is</emphasis>
275 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;close&#32;to&#32;0&#32;(|x|&#32;&lt;=&#32;0.25)&#32;then&#32;both&#32;rp&#32;and&#32;rn&#32;are&#32;correct;</emphasis>
276 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;and&#32;if&#32;x&#32;is&#32;not&#32;close&#32;to&#32;0,&#32;then&#32;trunc(x-1.0)&#32;yields&#32;the</emphasis>
277 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;appropriate&#32;sign.</emphasis>
278 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
279 
280 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
281 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Clamp&#32;rp&#32;to&#32;zero&#32;if&#32;tx&#32;&lt;&#32;0.</emphasis>
282 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Clamp&#32;rn&#32;to&#32;zero&#32;if&#32;tx&#32;&gt;=&#32;0.</emphasis>
283 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
284 &#32;&#32;&#32;&#32;m&#32;=&#32;sx&#32;&gt;&gt;&#32;63;
285 &#32;&#32;&#32;&#32;rn&#32;&amp;=&#32;m;
286 &#32;&#32;&#32;&#32;rp&#32;&amp;=&#32;~m;
287 
288 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
289 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Get&#32;the&#32;12&#32;upper&#32;bits&#32;of&#32;tx;&#32;if&#32;they&#32;are&#32;not&#32;all&#32;zeros&#32;or</emphasis>
290 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;all&#32;ones,&#32;then&#32;tx&#32;&gt;=&#32;2^52&#32;or&#32;tx&#32;&lt;&#32;-2^52,&#32;and&#32;we&#32;clamp&#32;both</emphasis>
291 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;rp&#32;and&#32;rn&#32;to&#32;zero.&#32;Otherwise,&#32;we&#32;clamp&#32;tx&#32;to&#32;zero.</emphasis>
292 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
293 &#32;&#32;&#32;&#32;ub&#32;=&#32;(uint32_t)((uint64_t)tx&#32;&gt;&gt;&#32;52);
294 &#32;&#32;&#32;&#32;m&#32;=&#32;-(int64_t)((((ub&#32;+&#32;1)&#32;&amp;&#32;0xFFF)&#32;-&#32;2)&#32;&gt;&gt;&#32;31);
295 &#32;&#32;&#32;&#32;rp&#32;&amp;=&#32;m;
296 &#32;&#32;&#32;&#32;rn&#32;&amp;=&#32;m;
297 &#32;&#32;&#32;&#32;tx&#32;&amp;=&#32;~m;
298 
299 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
300 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Only&#32;one&#32;of&#32;tx,&#32;rn&#32;or&#32;rp&#32;(at&#32;most)&#32;can&#32;be&#32;non-zero&#32;at&#32;this</emphasis>
301 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;point.</emphasis>
302 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tx&#32;|&#32;rn&#32;|&#32;rp;
304 }
305 
306 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;int64_t&#32;falcon_fpr_floor(falcon_fpr&#32;x)
307 {
308 &#32;&#32;&#32;&#32;int64_t&#32;r;
309 
310 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
311 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;The&#32;cast&#32;performs&#32;a&#32;trunc()&#32;(rounding&#32;toward&#32;0)&#32;and&#32;thus&#32;is</emphasis>
312 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;wrong&#32;by&#32;1&#32;for&#32;most&#32;negative&#32;values.&#32;The&#32;correction&#32;below&#32;is</emphasis>
313 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;constant-time&#32;as&#32;long&#32;as&#32;the&#32;compiler&#32;turns&#32;the</emphasis>
314 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;floating-point&#32;conversion&#32;result&#32;into&#32;a&#32;0/1&#32;integer&#32;without&#32;a</emphasis>
315 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;conditional&#32;branch&#32;or&#32;another&#32;non-constant-time&#32;construction.</emphasis>
316 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;This&#32;should&#32;hold&#32;on&#32;all&#32;modern&#32;architectures&#32;with&#32;an&#32;FPU&#32;(and</emphasis>
317 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;if&#32;it&#32;is&#32;false&#32;on&#32;a&#32;given&#32;arch,&#32;then&#32;chances&#32;are&#32;that&#32;the&#32;FPU</emphasis>
318 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;itself&#32;is&#32;not&#32;constant-time,&#32;making&#32;the&#32;point&#32;moot).</emphasis>
319 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
320 &#32;&#32;&#32;&#32;r&#32;=&#32;(int64_t)x.v;
321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r&#32;-&#32;(x.v&#32;&lt;&#32;(double)r);
322 }
323 
324 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;int64_t&#32;falcon_fpr_trunc(falcon_fpr&#32;x)
325 {
326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(int64_t)x.v;
327 }
328 
329 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_add(falcon_fpr&#32;x,&#32;falcon_fpr&#32;y)
330 {
331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;+&#32;y.v);
332 }
333 
334 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_sub(falcon_fpr&#32;x,&#32;falcon_fpr&#32;y)
335 {
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;-&#32;y.v);
337 }
338 
339 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_neg(falcon_fpr&#32;x)
340 {
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(-x.v);
342 }
343 
344 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_half(falcon_fpr&#32;x)
345 {
346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;*&#32;0.5);
347 }
348 
349 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_double(falcon_fpr&#32;x)
350 {
351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;+&#32;x.v);
352 }
353 
354 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_mul(falcon_fpr&#32;x,&#32;falcon_fpr&#32;y)
355 {
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;*&#32;y.v);
357 }
358 
359 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_sqr(falcon_fpr&#32;x)
360 {
361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;*&#32;x.v);
362 }
363 
364 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_inv(falcon_fpr&#32;x)
365 {
366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(1.0&#32;/&#32;x.v);
367 }
368 
369 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_div(falcon_fpr&#32;x,&#32;falcon_fpr&#32;y)
370 {
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_FPR(x.v&#32;/&#32;y.v);
372 }
373 
374 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_fpr_sqrt_avx2(<emphasis role="keywordtype">double</emphasis>&#32;*t)
375 {
376 &#32;&#32;&#32;&#32;__m128d&#32;x;
377 
378 &#32;&#32;&#32;&#32;x&#32;=&#32;_mm_load1_pd(t);
379 &#32;&#32;&#32;&#32;x&#32;=&#32;_mm_sqrt_pd(x);
380 &#32;&#32;&#32;&#32;_mm_storel_pd(t,&#32;x);
381 }
382 
383 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;falcon_fpr&#32;falcon_fpr_sqrt(falcon_fpr&#32;x)
384 {
385 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
386 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;We&#32;prefer&#32;not&#32;to&#32;have&#32;a&#32;dependency&#32;on&#32;libm&#32;when&#32;it&#32;can&#32;be</emphasis>
387 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;avoided.&#32;On&#32;x86,&#32;calling&#32;the&#32;sqrt()&#32;libm&#32;function&#32;inlines</emphasis>
388 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;relevant&#32;opcode&#32;(fsqrt&#32;or&#32;sqrtsd,&#32;depending&#32;on&#32;whether</emphasis>
389 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;387&#32;FPU&#32;or&#32;SSE2&#32;is&#32;used&#32;for&#32;floating-point&#32;operations)</emphasis>
390 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;but&#32;then&#32;makes&#32;an&#32;optional&#32;call&#32;to&#32;the&#32;library&#32;function</emphasis>
391 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;for&#32;proper&#32;error&#32;handling,&#32;in&#32;case&#32;the&#32;operand&#32;is&#32;negative.</emphasis>
392 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
393 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;To&#32;avoid&#32;this&#32;dependency,&#32;we&#32;use&#32;intrinsics&#32;or&#32;inline&#32;assembly</emphasis>
394 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;on&#32;recognized&#32;platforms:</emphasis>
395 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
396 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;-&#32;If&#32;AVX2&#32;is&#32;explicitly&#32;enabled,&#32;then&#32;we&#32;use&#32;SSE2&#32;intrinsics.</emphasis>
397 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
398 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;-&#32;On&#32;GCC/Clang&#32;with&#32;SSE&#32;maths,&#32;we&#32;use&#32;SSE2&#32;intrinsics.</emphasis>
399 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
400 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;-&#32;On&#32;GCC/Clang&#32;on&#32;i386,&#32;or&#32;MSVC&#32;on&#32;i386,&#32;we&#32;use&#32;inline&#32;assembly</emphasis>
401 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;to&#32;call&#32;the&#32;387&#32;FPU&#32;fsqrt&#32;opcode.</emphasis>
402 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
403 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;-&#32;On&#32;GCC/Clang/XLC&#32;on&#32;PowerPC,&#32;we&#32;use&#32;inline&#32;assembly&#32;to&#32;call</emphasis>
404 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;the&#32;fsqrt&#32;opcode&#32;(Clang&#32;needs&#32;a&#32;special&#32;hack).</emphasis>
405 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
406 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;-&#32;On&#32;GCC/Clang&#32;on&#32;ARM&#32;with&#32;hardware&#32;floating-point,&#32;we&#32;use</emphasis>
407 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;inline&#32;assembly&#32;to&#32;call&#32;the&#32;vqsrt.f64&#32;opcode.&#32;Due&#32;to&#32;a</emphasis>
408 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;complex&#32;ecosystem&#32;of&#32;compilers&#32;and&#32;assembly&#32;syntaxes,&#32;we</emphasis>
409 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;have&#32;to&#32;call&#32;it&#32;&quot;fsqrt&quot;&#32;or&#32;&quot;fsqrtd&quot;,&#32;depending&#32;on&#32;case.</emphasis>
410 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*</emphasis>
411 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;the&#32;platform&#32;is&#32;not&#32;recognized,&#32;a&#32;call&#32;to&#32;the&#32;system</emphasis>
412 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;library&#32;function&#32;sqrt()&#32;is&#32;performed.&#32;On&#32;some&#32;compilers,&#32;this</emphasis>
413 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;may&#32;actually&#32;inline&#32;the&#32;relevant&#32;opcode,&#32;and&#32;call&#32;the&#32;library</emphasis>
414 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;function&#32;only&#32;when&#32;the&#32;input&#32;is&#32;invalid&#32;(e.g.&#32;negative);</emphasis>
415 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Falcon&#32;never&#32;actually&#32;calls&#32;sqrt()&#32;on&#32;a&#32;negative&#32;value,&#32;but</emphasis>
416 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;dependency&#32;to&#32;libm&#32;will&#32;still&#32;be&#32;there.</emphasis>
417 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
418 
419 &#32;&#32;&#32;&#32;falcon_fpr_sqrt_avx2(&amp;x.v);
420 
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
422 }
423 
424 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;int32_t&#32;falcon_fpr_lt(falcon_fpr&#32;x,&#32;falcon_fpr&#32;y)
425 {
426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x.v&#32;&lt;&#32;y.v;
427 }
428 
429 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint64_t&#32;falcon_fpr_expm_p63(falcon_fpr&#32;x,&#32;falcon_fpr&#32;ccs)
430 {
431 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
432 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Polynomial&#32;approximation&#32;of&#32;exp(-x)&#32;is&#32;taken&#32;from&#32;FACCT:</emphasis>
433 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;https://eprint.iacr.org/2018/1234</emphasis>
434 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Specifically,&#32;values&#32;are&#32;extracted&#32;from&#32;the&#32;implementation</emphasis>
435 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;referenced&#32;from&#32;the&#32;FACCT&#32;article,&#32;and&#32;available&#32;at:</emphasis>
436 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;&#32;&#32;https://github.com/raykzhao/gaussian</emphasis>
437 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Tests&#32;over&#32;more&#32;than&#32;24&#32;billions&#32;of&#32;random&#32;inputs&#32;in&#32;the</emphasis>
438 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;0..log(2)&#32;range&#32;have&#32;never&#32;shown&#32;a&#32;deviation&#32;larger&#32;than</emphasis>
439 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;2^(-50)&#32;from&#32;the&#32;true&#32;mathematical&#32;value.</emphasis>
440 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
441 
442 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
443 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;AVX2&#32;implementation&#32;uses&#32;more&#32;operations&#32;than&#32;Horner&apos;s&#32;method,</emphasis>
444 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;but&#32;with&#32;a&#32;lower&#32;expression&#32;tree&#32;depth.&#32;This&#32;helps&#32;because</emphasis>
445 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;additions&#32;and&#32;multiplications&#32;have&#32;a&#32;latency&#32;of&#32;4&#32;cycles&#32;on</emphasis>
446 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*&#32;a&#32;Skylake,&#32;but&#32;the&#32;CPU&#32;can&#32;issue&#32;two&#32;of&#32;them&#32;per&#32;cycle.</emphasis>
447 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
448 
449 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">union&#32;</emphasis>
450 &#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d[12];
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m256d&#32;v[3];
453 &#32;&#32;&#32;&#32;}&#32;c&#32;=&#32;{
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.999999999999994892974086724280,
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.500000000000019206858326015208,
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.166666666666984014666397229121,
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.041666666666110491190622155955,
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.008333333327800835146903501993,
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.001388888894063186997887560103,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000198412739277311890541063977,
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000024801566833585381209939524,
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000002755586350219122514855659,
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000000275607356160477811864927,
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000000025299506379442070029551,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.000000002073772366009083061987
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
468 &#32;&#32;&#32;&#32;};
469 
470 &#32;&#32;&#32;&#32;__m256d&#32;d14;
471 &#32;&#32;&#32;&#32;__m256d&#32;d58;
472 &#32;&#32;&#32;&#32;__m256d&#32;d9c;
473 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d1;
474 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d2;
475 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d4;
476 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d8;
477 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;y;
478 
479 &#32;&#32;&#32;&#32;d1&#32;=&#32;-x.v;
480 &#32;&#32;&#32;&#32;d2&#32;=&#32;d1&#32;*&#32;d1;
481 &#32;&#32;&#32;&#32;d4&#32;=&#32;d2&#32;*&#32;d2;
482 &#32;&#32;&#32;&#32;d8&#32;=&#32;d4&#32;*&#32;d4;
483 &#32;&#32;&#32;&#32;d14&#32;=&#32;_mm256_set_pd(d4,&#32;d2&#32;*&#32;d1,&#32;d2,&#32;d1);
484 &#32;&#32;&#32;&#32;d58&#32;=&#32;_mm256_mul_pd(d14,&#32;_mm256_set1_pd(d4));
485 &#32;&#32;&#32;&#32;d9c&#32;=&#32;_mm256_mul_pd(d14,&#32;_mm256_set1_pd(d8));
486 &#32;&#32;&#32;&#32;d14&#32;=&#32;_mm256_mul_pd(d14,&#32;_mm256_loadu_pd(&amp;c.d[0]));
487 &#32;&#32;&#32;&#32;d58&#32;=&#32;falcon_fmadd(d58,&#32;_mm256_loadu_pd(&amp;c.d[4]),&#32;d14);
488 &#32;&#32;&#32;&#32;d9c&#32;=&#32;falcon_fmadd(d9c,&#32;_mm256_loadu_pd(&amp;c.d[8]),&#32;d58);
489 &#32;&#32;&#32;&#32;d9c&#32;=&#32;_mm256_hadd_pd(d9c,&#32;d9c);
490 &#32;&#32;&#32;&#32;y&#32;=&#32;1.0&#32;+&#32;_mm_cvtsd_f64(_mm256_castpd256_pd128(d9c))&#32;+&#32;_mm_cvtsd_f64(_mm256_extractf128_pd(d9c,&#32;1));
491 &#32;&#32;&#32;&#32;y&#32;*=&#32;ccs.v;
492 
493 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
494 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Final&#32;conversion&#32;goes&#32;through&#32;int64_t&#32;first,&#32;because&#32;that&apos;s&#32;what</emphasis>
495 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;the&#32;underlying&#32;opcode&#32;(vcvttsd2si)&#32;will&#32;do,&#32;and&#32;we&#32;know&#32;that&#32;the</emphasis>
496 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;result&#32;will&#32;fit,&#32;since&#32;x&#32;&gt;=&#32;0&#32;and&#32;ccs&#32;&lt;&#32;1.&#32;If&#32;we&#32;did&#32;the</emphasis>
497 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;conversion&#32;directly&#32;to&#32;uint64_t,&#32;then&#32;the&#32;compiler&#32;would&#32;add&#32;some</emphasis>
498 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;extra&#32;code&#32;to&#32;cover&#32;the&#32;case&#32;of&#32;a&#32;source&#32;value&#32;of&#32;2^63&#32;or&#32;more,</emphasis>
499 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;and&#32;though&#32;the&#32;alternate&#32;path&#32;would&#32;never&#32;be&#32;exercised,&#32;the</emphasis>
500 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;extra&#32;comparison&#32;would&#32;cost&#32;us&#32;some&#32;cycles.</emphasis>
501 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint64_t)(int64_t)(y&#32;*&#32;falcon_fpr_ptwo63.v);
503 
504 }
505 
506 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_mkn(uint32_t&#32;logn)
507 {
508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((<emphasis role="keywordtype">size_t</emphasis>)1&#32;&lt;&lt;&#32;logn);
509 }
510 
511 <emphasis role="comment">/*&#32;fft.c&#32;*/</emphasis>
512 
513 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_fpc_add(falcon_fpr*&#32;d_re,&#32;falcon_fpr*&#32;d_im,&#32;falcon_fpr&#32;a_re,&#32;falcon_fpr&#32;a_im,&#32;falcon_fpr&#32;b_re,&#32;falcon_fpr&#32;b_im)
514 {
515 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_re;
516 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_im;
517 
518 &#32;&#32;&#32;&#32;fpct_re&#32;=&#32;falcon_fpr_add(a_re,&#32;b_re);
519 &#32;&#32;&#32;&#32;fpct_im&#32;=&#32;falcon_fpr_add(a_im,&#32;b_im);
520 &#32;&#32;&#32;&#32;*d_re&#32;=&#32;fpct_re;
521 &#32;&#32;&#32;&#32;*d_im&#32;=&#32;fpct_im;
522 }
523 
524 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_fpc_sub(falcon_fpr*&#32;d_re,&#32;falcon_fpr*&#32;d_im,&#32;falcon_fpr&#32;a_re,&#32;falcon_fpr&#32;a_im,&#32;falcon_fpr&#32;b_re,&#32;falcon_fpr&#32;b_im)
525 {
526 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_re;
527 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_im;
528 
529 &#32;&#32;&#32;&#32;fpct_re&#32;=&#32;falcon_fpr_sub(a_re,&#32;b_re);
530 &#32;&#32;&#32;&#32;fpct_im&#32;=&#32;falcon_fpr_sub(a_im,&#32;b_im);
531 &#32;&#32;&#32;&#32;*d_re&#32;=&#32;fpct_re;
532 &#32;&#32;&#32;&#32;*d_im&#32;=&#32;fpct_im;
533 }
534 
535 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_fpc_mul(falcon_fpr*&#32;d_re,&#32;falcon_fpr*&#32;d_im,&#32;falcon_fpr&#32;a_re,&#32;falcon_fpr&#32;a_im,&#32;falcon_fpr&#32;b_re,&#32;falcon_fpr&#32;b_im)
536 {
537 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_a_re;
538 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_a_im;
539 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_b_re;
540 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_b_im;
541 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_d_re;
542 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_d_im;
543 
544 &#32;&#32;&#32;&#32;fpct_a_re&#32;=&#32;a_re;
545 &#32;&#32;&#32;&#32;fpct_a_im&#32;=&#32;a_im;
546 &#32;&#32;&#32;&#32;fpct_b_re&#32;=&#32;b_re;
547 &#32;&#32;&#32;&#32;fpct_b_im&#32;=&#32;b_im;
548 &#32;&#32;&#32;&#32;fpct_d_re&#32;=&#32;falcon_fpr_sub(falcon_fpr_mul(fpct_a_re,&#32;fpct_b_re),&#32;falcon_fpr_mul(fpct_a_im,&#32;fpct_b_im));
549 &#32;&#32;&#32;&#32;fpct_d_im&#32;=&#32;falcon_fpr_add(falcon_fpr_mul(fpct_a_re,&#32;fpct_b_im),&#32;falcon_fpr_mul(fpct_a_im,&#32;fpct_b_re));
550 &#32;&#32;&#32;&#32;*d_re&#32;=&#32;fpct_d_re;
551 &#32;&#32;&#32;&#32;*d_im&#32;=&#32;fpct_d_im;
552 }
553 
554 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;falcon_fpc_div(falcon_fpr*&#32;d_re,&#32;falcon_fpr*&#32;d_im,&#32;falcon_fpr&#32;a_re,&#32;falcon_fpr&#32;a_im,&#32;falcon_fpr&#32;b_re,&#32;falcon_fpr&#32;b_im)
555 {
556 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_a_re;
557 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_a_im;
558 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_b_re;
559 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_b_im;
560 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_d_re;
561 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_d_im;
562 &#32;&#32;&#32;&#32;falcon_fpr&#32;fpct_m;
563 
564 &#32;&#32;&#32;&#32;fpct_a_re&#32;=&#32;a_re;
565 &#32;&#32;&#32;&#32;fpct_a_im&#32;=&#32;a_im;
566 &#32;&#32;&#32;&#32;fpct_b_re&#32;=&#32;b_re;
567 &#32;&#32;&#32;&#32;fpct_b_im&#32;=&#32;b_im;
568 &#32;&#32;&#32;&#32;fpct_m&#32;=&#32;falcon_fpr_add(falcon_fpr_sqr(fpct_b_re),&#32;falcon_fpr_sqr(fpct_b_im));
569 &#32;&#32;&#32;&#32;fpct_m&#32;=&#32;falcon_fpr_inv(fpct_m);
570 &#32;&#32;&#32;&#32;fpct_b_re&#32;=&#32;falcon_fpr_mul(fpct_b_re,&#32;fpct_m);
571 &#32;&#32;&#32;&#32;fpct_b_im&#32;=&#32;falcon_fpr_mul(falcon_fpr_neg(fpct_b_im),&#32;fpct_m);
572 &#32;&#32;&#32;&#32;fpct_d_re&#32;=&#32;falcon_fpr_sub(falcon_fpr_mul(fpct_a_re,&#32;fpct_b_re),&#32;falcon_fpr_mul(fpct_a_im,&#32;fpct_b_im));
573 &#32;&#32;&#32;&#32;fpct_d_im&#32;=&#32;falcon_fpr_add(falcon_fpr_mul(fpct_a_re,&#32;fpct_b_im),&#32;falcon_fpr_mul(fpct_a_im,&#32;fpct_b_re));
574 &#32;&#32;&#32;&#32;*d_re&#32;=&#32;fpct_d_re;
575 &#32;&#32;&#32;&#32;*d_im&#32;=&#32;fpct_d_im;
576 }
577 
578 <emphasis role="comment">/*&#32;codec.c&#32;*/</emphasis>
579 
580 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;falcon_avx2_max_fg_bits[FALCON_MAXBITS_SIZE];
581 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;falcon_falcon_max_FG_bits[FALCON_MAXBITS_SIZE];
582 
583 <emphasis role="comment">/*&#32;sign.c&#32;*/</emphasis>
584 
585 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
586 {
587 &#32;&#32;&#32;&#32;falcon_prng_state&#32;p;
588 &#32;&#32;&#32;&#32;falcon_fpr&#32;sigma_min;
589 }&#32;falcon_sampler_context;
590 
591 <emphasis role="keyword">typedef</emphasis>&#32;int32_t(*falcon_samplerZ)(<emphasis role="keywordtype">void</emphasis>*&#32;ctx,&#32;falcon_fpr&#32;mu,&#32;falcon_fpr&#32;sigma);
592 
593 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_ffLDL_treesize(uint32_t&#32;logn)
594 {
595 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
596 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Get&#32;the&#32;size&#32;of&#32;the&#32;LDL&#32;tree&#32;for&#32;an&#32;input&#32;with&#32;polynomials&#32;of&#32;size</emphasis>
597 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;2^logn.&#32;The&#32;size&#32;is&#32;expressed&#32;in&#32;the&#32;number&#32;of&#32;elements.</emphasis>
598 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;For&#32;logn&#32;=&#32;0&#32;(polynomials&#32;are&#32;constant),&#32;the&#32;&quot;tree&quot;&#32;is&#32;a</emphasis>
599 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;single&#32;element.&#32;Otherwise,&#32;the&#32;tree&#32;node&#32;has&#32;size&#32;2^logn,&#32;and</emphasis>
600 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;has&#32;two&#32;child&#32;trees&#32;for&#32;size&#32;logn-1&#32;each.&#32;Thus,&#32;treesize&#32;s()</emphasis>
601 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;must&#32;fulfill&#32;these&#32;two&#32;relations:</emphasis>
602 <emphasis role="comment">&#32;&#32;&#32;&#32;*</emphasis>
603 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;&#32;&#32;s(0)&#32;=&#32;1</emphasis>
604 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;&#32;&#32;s(logn)&#32;=&#32;(2^logn)&#32;+&#32;2*s(logn-1)</emphasis>
605 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
606 
607 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(logn&#32;+&#32;1)&#32;&lt;&lt;&#32;logn;
608 }
609 
610 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_skoff_b00(uint32_t&#32;logn)
611 {
612 &#32;&#32;&#32;&#32;(void)logn;
613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
614 }
615 
616 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_skoff_b01(uint32_t&#32;logn)
617 {
618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_mkn(logn);
619 }
620 
621 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_skoff_b10(uint32_t&#32;logn)
622 {
623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2&#32;*&#32;falcon_mkn(logn);
624 }
625 
626 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_skoff_b11(uint32_t&#32;logn)
627 {
628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3&#32;*&#32;falcon_mkn(logn);
629 }
630 
631 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_skoff_tree(uint32_t&#32;logn)
632 {
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;4&#32;*&#32;falcon_mkn(logn);
634 }
635 
636 <emphasis role="comment">/*&#32;keygen.c&#32;*/</emphasis>
637 
638 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;falcon_avx2_l2bound[FALCON_L2BOUND_SIZE];
639 
640 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint64_t&#32;falcon_avx2_gauss_1024_12289[FALCON_GAUS_1024_12289_SIZE];
641 
642 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint16_t&#32;falcon_avx2_falcon_rev10[FALCON_REV10_SIZE];
643 
644 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_avx2_max_bl_small[FALCON_MAX_BL_SMALL_SIZE];
645 
646 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;falcon_avx2_max_bl_large[FALCON_MAX_BL_LARGE_SIZE];
647 
648 <emphasis role="comment">/*</emphasis>
649 <emphasis role="comment">&#32;*&#32;Average&#32;and&#32;standard&#32;deviation&#32;for&#32;the&#32;maximum&#32;size&#32;(in&#32;bits)&#32;of</emphasis>
650 <emphasis role="comment">&#32;*&#32;coefficients&#32;of&#32;(f,g),&#32;depending&#32;on&#32;depth.&#32;These&#32;values&#32;are&#32;used</emphasis>
651 <emphasis role="comment">&#32;*&#32;to&#32;compute&#32;bounds&#32;for&#32;Babai&apos;s&#32;reduction.</emphasis>
652 <emphasis role="comment">&#32;*/</emphasis>
653 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
654 &#32;&#32;&#32;&#32;int32_t&#32;avg;
655 &#32;&#32;&#32;&#32;int32_t&#32;std;
656 }&#32;falcon_bit_length[]&#32;=&#32;{
657 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;4,&#32;&#32;0&#32;},
658 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;11,&#32;&#32;1&#32;},
659 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;24,&#32;&#32;1&#32;},
660 &#32;&#32;&#32;&#32;{&#32;&#32;&#32;50,&#32;&#32;1&#32;},
661 &#32;&#32;&#32;&#32;{&#32;&#32;102,&#32;&#32;1&#32;},
662 &#32;&#32;&#32;&#32;{&#32;&#32;202,&#32;&#32;2&#32;},
663 &#32;&#32;&#32;&#32;{&#32;&#32;401,&#32;&#32;4&#32;},
664 &#32;&#32;&#32;&#32;{&#32;&#32;794,&#32;&#32;5&#32;},
665 &#32;&#32;&#32;&#32;{&#32;1577,&#32;&#32;8&#32;},
666 &#32;&#32;&#32;&#32;{&#32;3138,&#32;13&#32;},
667 &#32;&#32;&#32;&#32;{&#32;6308,&#32;25&#32;}
668 };
669 
670 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_set(int32_t&#32;x,&#32;uint32_t&#32;p)
671 {
672 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
673 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Reduce&#32;a&#32;small&#32;signed&#32;integer&#32;modulo&#32;a&#32;small&#32;prime.&#32;The&#32;source</emphasis>
674 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;value&#32;x&#32;MUST&#32;be&#32;such&#32;that&#32;-p&#32;&lt;&#32;x&#32;&lt;&#32;p.</emphasis>
675 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
676 
677 &#32;&#32;&#32;&#32;uint32_t&#32;w;
678 
679 &#32;&#32;&#32;&#32;w&#32;=&#32;(uint32_t)x;
680 &#32;&#32;&#32;&#32;w&#32;+=&#32;p&#32;&amp;&#32;(uint32_t)-(int32_t)(w&#32;&gt;&gt;&#32;31);
681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;w;
682 }
683 
684 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;int32_t&#32;falcon_modp_norm(uint32_t&#32;x,&#32;uint32_t&#32;p)
685 {
686 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
687 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Normalize&#32;a&#32;modular&#32;integer&#32;around&#32;0.</emphasis>
688 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
689 
690 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(int32_t)(x&#32;-&#32;(p&#32;&amp;&#32;(((x&#32;-&#32;((p&#32;+&#32;1)&#32;&gt;&gt;&#32;1))&#32;&gt;&gt;&#32;31)&#32;-&#32;1)));
691 }
692 
693 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_ninv31(uint32_t&#32;p)
694 {
695 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
696 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Compute&#32;-1/p&#32;mod&#32;2^31.&#32;This&#32;works&#32;for&#32;all&#32;odd&#32;integers&#32;p&#32;that&#32;fit&#32;on&#32;31&#32;bits.</emphasis>
697 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
698 &#32;&#32;&#32;&#32;uint32_t&#32;y;
699 
700 &#32;&#32;&#32;&#32;y&#32;=&#32;2&#32;-&#32;p;
701 &#32;&#32;&#32;&#32;y&#32;*=&#32;2&#32;-&#32;p&#32;*&#32;y;
702 &#32;&#32;&#32;&#32;y&#32;*=&#32;2&#32;-&#32;p&#32;*&#32;y;
703 &#32;&#32;&#32;&#32;y&#32;*=&#32;2&#32;-&#32;p&#32;*&#32;y;
704 &#32;&#32;&#32;&#32;y&#32;*=&#32;2&#32;-&#32;p&#32;*&#32;y;
705 
706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint32_t)0x7FFFFFFFUL&#32;&amp;&#32;(uint32_t)-(int32_t)y;
707 }
708 
709 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_R(uint32_t&#32;p)
710 {
711 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
712 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Since&#32;2^30&#32;&lt;&#32;p&#32;&lt;&#32;2^31,&#32;we&#32;know&#32;that&#32;2^31&#32;mod&#32;p&#32;is&#32;simply&#32;2^31&#32;-&#32;p.</emphasis>
713 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
714 
715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((uint32_t)1&#32;&lt;&lt;&#32;31)&#32;-&#32;p;
716 }
717 
718 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_add(uint32_t&#32;a,&#32;uint32_t&#32;b,&#32;uint32_t&#32;p)
719 {
720 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
721 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Addition&#32;modulo&#32;p.</emphasis>
722 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
723 
724 &#32;&#32;&#32;&#32;uint32_t&#32;d;
725 
726 &#32;&#32;&#32;&#32;d&#32;=&#32;a&#32;+&#32;b&#32;-&#32;p;
727 &#32;&#32;&#32;&#32;d&#32;+=&#32;p&#32;&amp;&#32;(uint32_t)-(int32_t)(d&#32;&gt;&gt;&#32;31);
728 
729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
730 }
731 
732 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_sub(uint32_t&#32;a,&#32;uint32_t&#32;b,&#32;uint32_t&#32;p)
733 {
734 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
735 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Subtraction&#32;modulo&#32;p.</emphasis>
736 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
737 
738 &#32;&#32;&#32;&#32;uint32_t&#32;d;
739 
740 &#32;&#32;&#32;&#32;d&#32;=&#32;a&#32;-&#32;b;
741 &#32;&#32;&#32;&#32;d&#32;+=&#32;p&#32;&amp;&#32;(uint32_t)-(int32_t)(d&#32;&gt;&gt;&#32;31);
742 
743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
744 }
745 
746 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_modp_montymul(uint32_t&#32;a,&#32;uint32_t&#32;b,&#32;uint32_t&#32;p,&#32;uint32_t&#32;p0i)
747 {
748 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
749 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Montgomery&#32;multiplication&#32;modulo&#32;p.&#32;The&#32;&apos;p0i&apos;&#32;value&#32;is&#32;-1/p&#32;mod&#32;2^31.</emphasis>
750 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;It&#32;is&#32;required&#32;that&#32;p&#32;is&#32;an&#32;odd&#32;integer.</emphasis>
751 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
752 
753 &#32;&#32;&#32;&#32;uint64_t&#32;w;
754 &#32;&#32;&#32;&#32;uint64_t&#32;z;
755 &#32;&#32;&#32;&#32;uint32_t&#32;d;
756 
757 &#32;&#32;&#32;&#32;z&#32;=&#32;(uint64_t)a&#32;*&#32;(uint64_t)b;
758 &#32;&#32;&#32;&#32;w&#32;=&#32;((z&#32;*&#32;p0i)&#32;&amp;&#32;(uint64_t)0x7FFFFFFF)&#32;*&#32;p;
759 &#32;&#32;&#32;&#32;d&#32;=&#32;(uint32_t)((z&#32;+&#32;w)&#32;&gt;&gt;&#32;31)&#32;-&#32;p;
760 &#32;&#32;&#32;&#32;d&#32;+=&#32;p&#32;&amp;&#32;(uint32_t)-(int32_t)(d&#32;&gt;&gt;&#32;31);
761 
762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
763 }
764 
765 <emphasis role="comment">/*&#32;verify.c&#32;*/</emphasis>
766 
767 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
768 {
769 &#32;&#32;&#32;&#32;uint32_t&#32;p;
770 &#32;&#32;&#32;&#32;uint32_t&#32;g;
771 &#32;&#32;&#32;&#32;uint32_t&#32;s;
772 }&#32;falcon_small_prime;
773 
774 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint16_t&#32;falcon_avx2_GMb[FALCON_GMB_SIZE];
775 
776 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint16_t&#32;falcon_avx2_iGMb[FALCON_GMB_SIZE];
777 
778 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;falcon_small_prime&#32;falcon_avx2_small_primes[FALCON_SMALL_PRIME_SIZE];
779 
780 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_conv_small(int32_t&#32;x)
781 {
782 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
783 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Reduce&#32;a&#32;small&#32;signed&#32;integer&#32;modulo&#32;q.&#32;The&#32;source&#32;integer&#32;MUST</emphasis>
784 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;be&#32;between&#32;-q/2&#32;and&#32;+q/2.</emphasis>
785 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;If&#32;x&#32;&lt;&#32;0,&#32;the&#32;cast&#32;to&#32;uint32_t&#32;will&#32;set&#32;the&#32;high&#32;bit&#32;to&#32;1.</emphasis>
786 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
787 &#32;&#32;&#32;&#32;uint32_t&#32;y;
788 
789 &#32;&#32;&#32;&#32;y&#32;=&#32;(uint32_t)x;
790 &#32;&#32;&#32;&#32;y&#32;+=&#32;FALCON_Q&#32;&amp;&#32;(uint32_t)-(int32_t)(y&#32;&gt;&gt;&#32;31);
791 
792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;y;
793 }
794 
795 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_add(uint32_t&#32;x,&#32;uint32_t&#32;y)
796 {
797 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
798 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Addition&#32;modulo&#32;q.&#32;Operands&#32;must&#32;be&#32;in&#32;the&#32;0..q-1&#32;range.</emphasis>
799 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;We&#32;compute&#32;x&#32;+&#32;y&#32;-&#32;q.&#32;If&#32;the&#32;result&#32;is&#32;negative,&#32;then&#32;the</emphasis>
800 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;high&#32;bit&#32;will&#32;be&#32;set,&#32;and&#32;&apos;d&#32;&gt;&gt;&#32;31&apos;&#32;will&#32;be&#32;equal&#32;to&#32;1;</emphasis>
801 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;thus&#32;&apos;-(d&#32;&gt;&gt;&#32;31)&apos;&#32;will&#32;be&#32;an&#32;all-one&#32;pattern.&#32;Otherwise,</emphasis>
802 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;it&#32;will&#32;be&#32;an&#32;all-zero&#32;pattern.&#32;In&#32;other&#32;words,&#32;this</emphasis>
803 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;implements&#32;a&#32;conditional&#32;addition&#32;of&#32;q.</emphasis>
804 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
805 &#32;&#32;&#32;&#32;uint32_t&#32;d;
806 
807 &#32;&#32;&#32;&#32;d&#32;=&#32;x&#32;+&#32;y&#32;-&#32;FALCON_Q;
808 &#32;&#32;&#32;&#32;d&#32;+=&#32;FALCON_Q&#32;&amp;&#32;(uint32_t)-(int32_t)(d&#32;&gt;&gt;&#32;31);
809 
810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
811 }
812 
813 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_sub(uint32_t&#32;x,&#32;uint32_t&#32;y)
814 {
815 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
816 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Subtraction&#32;modulo&#32;q.&#32;Operands&#32;must&#32;be&#32;in&#32;the&#32;0..q-1&#32;range.</emphasis>
817 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;As&#32;in&#32;falcon_mq_add(),&#32;we&#32;use&#32;a&#32;conditional&#32;addition&#32;to&#32;ensure&#32;the</emphasis>
818 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;result&#32;is&#32;in&#32;the&#32;0..q-1&#32;range.</emphasis>
819 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
820 
821 &#32;&#32;&#32;&#32;uint32_t&#32;d;
822 
823 &#32;&#32;&#32;&#32;d&#32;=&#32;x&#32;-&#32;y;
824 &#32;&#32;&#32;&#32;d&#32;+=&#32;FALCON_Q&#32;&amp;&#32;(uint32_t)-(int32_t)(d&#32;&gt;&gt;&#32;31);
825 
826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
827 }
828 
829 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_rshift1(uint32_t&#32;x)
830 {
831 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
832 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Division&#32;by&#32;2&#32;modulo&#32;q.&#32;Operand&#32;must&#32;be&#32;in&#32;the&#32;0..q-1&#32;range.</emphasis>
833 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
834 
835 &#32;&#32;&#32;&#32;x&#32;+=&#32;FALCON_Q&#32;&amp;&#32;(uint32_t)-(int32_t)(x&#32;&amp;&#32;1);
836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(x&#32;&gt;&gt;&#32;1);
837 }
838 
839 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_montymul(uint32_t&#32;x,&#32;uint32_t&#32;y)
840 {
841 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
842 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Montgomery&#32;multiplication&#32;modulo&#32;q.&#32;If&#32;we&#32;set&#32;R&#32;=&#32;2^16&#32;mod&#32;q,&#32;then</emphasis>
843 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;this&#32;function&#32;computes:&#32;x&#32;*&#32;y&#32;/&#32;R&#32;mod&#32;q</emphasis>
844 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Operands&#32;must&#32;be&#32;in&#32;the&#32;0..q-1&#32;range.</emphasis>
845 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
846 
847 &#32;&#32;&#32;&#32;uint32_t&#32;w;
848 &#32;&#32;&#32;&#32;uint32_t&#32;z;
849 
850 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
851 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;We&#32;compute&#32;x*y&#32;+&#32;k*q&#32;with&#32;a&#32;value&#32;of&#32;k&#32;chosen&#32;so&#32;that&#32;the&#32;16</emphasis>
852 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;low&#32;bits&#32;of&#32;the&#32;result&#32;are&#32;0.&#32;We&#32;can&#32;then&#32;shift&#32;the&#32;value.</emphasis>
853 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;After&#32;the&#32;shift,&#32;result&#32;may&#32;still&#32;be&#32;larger&#32;than&#32;q,&#32;but&#32;it</emphasis>
854 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;will&#32;be&#32;lower&#32;than&#32;2*q,&#32;so&#32;a&#32;conditional&#32;subtraction&#32;works.</emphasis>
855 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
856 
857 &#32;&#32;&#32;&#32;z&#32;=&#32;x&#32;*&#32;y;
858 &#32;&#32;&#32;&#32;w&#32;=&#32;((z&#32;*&#32;FALCON_Q0I)&#32;&amp;&#32;0x0000FFFFUL)&#32;*&#32;FALCON_Q;
859 
860 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
861 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;When&#32;adding&#32;z&#32;and&#32;w,&#32;the&#32;result&#32;will&#32;have&#32;its&#32;low&#32;16&#32;bits</emphasis>
862 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;equal&#32;to&#32;0.&#32;Since&#32;x,&#32;y&#32;and&#32;z&#32;are&#32;lower&#32;than&#32;q,&#32;the&#32;sum&#32;will</emphasis>
863 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;be&#32;no&#32;more&#32;than&#32;(2^15&#32;-&#32;1)&#32;*&#32;q&#32;+&#32;(q&#32;-&#32;1)^2,&#32;which&#32;will</emphasis>
864 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;fit&#32;on&#32;29&#32;bits.</emphasis>
865 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
866 &#32;&#32;&#32;&#32;z&#32;=&#32;(z&#32;+&#32;w)&#32;&gt;&gt;&#32;16;
867 
868 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
869 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;After&#32;the&#32;shift,&#32;analysis&#32;shows&#32;that&#32;the&#32;value&#32;will&#32;be&#32;less</emphasis>
870 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;than&#32;2q.&#32;We&#32;do&#32;a&#32;subtraction&#32;then&#32;conditional&#32;subtraction&#32;to</emphasis>
871 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;ensure&#32;the&#32;result&#32;is&#32;in&#32;the&#32;expected&#32;range.</emphasis>
872 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
873 &#32;&#32;&#32;&#32;z&#32;-=&#32;FALCON_Q;
874 &#32;&#32;&#32;&#32;z&#32;+=&#32;FALCON_Q&#32;&amp;&#32;(uint32_t)-(int32_t)(z&#32;&gt;&gt;&#32;31);
875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;z;
876 }
877 
878 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;falcon_mq_montysqr(uint32_t&#32;x)
879 {
880 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
881 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;Montgomery&#32;squaring&#32;(computes&#32;(x^2)/R).</emphasis>
882 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
883 
884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;falcon_mq_montymul(x,&#32;x);
885 }
886 
887 
896 int32_t&#32;qsc_falcon_avx2_generate_keypair(uint8_t&#32;*pk,&#32;uint8_t&#32;*sk,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*rng_generate)(uint8_t*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
897 
908 int32_t&#32;qsc_falcon_avx2_sign(uint8_t&#32;*sm,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;*smlen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*m,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;mlen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*sk,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;(*rng_generate)(uint8_t*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
909 
920 <emphasis role="keywordtype">bool</emphasis>&#32;qsc_falcon_avx2_open(uint8_t&#32;*m,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;*mlen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*sm,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;smlen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*pk);
921 
922 <emphasis role="preprocessor">#endif</emphasis>
923 <emphasis role="comment">/*&#32;\endcond&#32;DOXYGEN_IGNORE&#32;*/</emphasis>
924 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
