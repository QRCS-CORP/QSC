<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_ecdsa_8h" xml:lang="en-US">
<title>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/ecdsa.h File Reference</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/ecdsa.h</primary></indexterm>
<para>

<para>Contains the primary public api for the ECDSA asymmetric signature scheme implementation. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &quot;common.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_ecdsa_8h_1a1fc3152184153b6440699dc34a393147"/>#define <emphasis role="strong">QSC_ECDSA_SEED_SIZE</emphasis>&#160;&#160;&#160;32</para>

<para>The byte size of the random seed array. </para>
</listitem>
            <listitem><para><anchor xml:id="_ecdsa_8h_1ae44879dc24135a2e63d21aa3d61f2170"/>#define <emphasis role="strong">QSC_ECDSA_ALGNAME</emphasis>&#160;&#160;&#160;&quot;ECDSA&quot;</para>

<para>The formal algorithm name. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>QSC_EXPORT_API void <link linkend="_ecdsa_8h_1a5cb7019a87307acc6cabd32215bff2be">qsc_ecdsa_generate_seeded_keypair</link> (uint8_t *publickey, uint8_t *privatekey, const uint8_t *seed)</para>

<para>Generates a ECDSA public/private key-pair. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_ecdsa_8h_1acb610f9305bde8f9c0b86aa2681cee94">qsc_ecdsa_generate_keypair</link> (uint8_t *publickey, uint8_t *privatekey, bool(*rng_generate)(uint8_t *, size_t))</para>

<para>Generates a ECDSA public/private key-pair. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API void <link linkend="_ecdsa_8h_1afc4a30cea712bf823fb6f9255cc78651">qsc_ecdsa_sign</link> (uint8_t *signedmsg, size_t *smsglen, const uint8_t *message, size_t msglen, const uint8_t *privatekey)</para>

<para>Takes the message as input and returns an array containing the signature followed by the message. </para>
</listitem>
            <listitem><para>QSC_EXPORT_API bool <link linkend="_ecdsa_8h_1af695383a08648a04c1ce7d039a3c2e18">qsc_ecdsa_verify</link> (uint8_t *message, size_t *msglen, const uint8_t *signedmsg, size_t smsglen, const uint8_t *publickey)</para>

<para>Verifies a signature-message pair with the public key. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains the primary public api for the ECDSA asymmetric signature scheme implementation. </para>

<para><formalpara><title>Date</title>

<para>September 21, 2020</para>
</formalpara>
<formalpara>
<title>Example</title>
<para><literallayout><computeroutput><emphasis role="comment">//&#32;An&#32;example&#32;of&#32;key-pair&#32;creation,&#32;encryption,&#32;and&#32;decryption</emphasis>
<emphasis role="preprocessor">#define&#32;MSGLEN&#32;32</emphasis>
uint8_t&#32;pk[QSC_ECDSA_PUBLICKEY_SIZE];
uint8_t&#32;sk[QSC_ECDSA_SECRETKEY_SIZE];
uint8_t&#32;msg[32];
uint8_t&#32;smsg[QSC_ECDSA_SIGNATURE_SIZE&#32;+&#32;MSGLEN];
uint8_t&#32;rmsg[32];

uint32_t&#32;rmsglen&#32;=&#32;0;
uint32_t&#32;smsglen&#32;=&#32;0;

<emphasis role="comment">//&#32;create&#32;the&#32;public&#32;and&#32;secret&#32;keys</emphasis>
qsc_ecdsa_generate_seeded_keypair(pk,&#32;sk,&#32;random-seed);
<emphasis role="comment">//&#32;returns&#32;the&#32;signed&#32;the&#32;message&#32;in&#32;smsg</emphasis>
qsc_ecdsa_sign(smsg,&#32;&amp;smsglen,&#32;msg,&#32;MSGLEN,&#32;sk);
<emphasis role="comment">//&#32;test&#32;the&#32;signature&#32;and&#32;return&#32;the&#32;message&#32;bytes&#32;in&#32;rmsg</emphasis>
<emphasis role="keywordflow">if</emphasis>&#32;(qsc_ecdsa_verify(rmsg,&#32;&amp;rmsglen,&#32;smsg,&#32;smsglen,&#32;pk)&#32;!=&#32;<emphasis role="keyword">true</emphasis>)
{
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;authentication&#32;failed,&#32;do&#32;something..</emphasis>
}
</computeroutput></literallayout></para>
</formalpara>
Reference implementations: LibSodium by Frank Denis &lt;a href=&quot;https://github.com/jedisct1/libsodium&quot; /a&gt; curve25519-donna by Adam Langley &lt;a href=&quot;https://github.com/agl/curve25519-donna&quot; /a&gt; NaCI by Daniel J. Bernstein, Tanja Lange, Peter Schwabe &lt;a href=&quot;https://nacl.cr.yp.to&quot; /a&gt;</para>

<para>Rewritten for Misra compliance and library integration by John G. Underhill September 21, 2020 </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_ecdsa_8h_1acb610f9305bde8f9c0b86aa2681cee94"/><section>
    <title>qsc_ecdsa_generate_keypair()</title>
<indexterm><primary>qsc_ecdsa_generate_keypair</primary><secondary>ecdsa.h</secondary></indexterm>
<indexterm><primary>ecdsa.h</primary><secondary>qsc_ecdsa_generate_keypair</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_ecdsa_generate_keypair (uint8_t * publickey, uint8_t * privatekey, bool(* rng_generate&#160;)(uint8_t *, size_t))</computeroutput></para><para>

<para>Generates a ECDSA public/private key-pair. </para>
</para>

<para><warning><title>Warning</title>

<para>Arrays must be sized to QSC_ECDSA_PUBLICKEY_SIZE and QSC_ECDSA_SECRETKEY_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>publickey</entry><entry>
<para>Pointer to the public verification-key array </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>Pointer to the private signature-key array </para>
</entry>
                            </row>
                            <row>
<entry>rng_generate</entry><entry>
<para>Pointer to the random generator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_ecdsa_8h_1a5cb7019a87307acc6cabd32215bff2be"/><section>
    <title>qsc_ecdsa_generate_seeded_keypair()</title>
<indexterm><primary>qsc_ecdsa_generate_seeded_keypair</primary><secondary>ecdsa.h</secondary></indexterm>
<indexterm><primary>ecdsa.h</primary><secondary>qsc_ecdsa_generate_seeded_keypair</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_ecdsa_generate_seeded_keypair (uint8_t * publickey, uint8_t * privatekey, const uint8_t * seed)</computeroutput></para><para>

<para>Generates a ECDSA public/private key-pair. </para>
</para>

<para><warning><title>Warning</title>

<para>Arrays must be sized to QSC_ECDSA_PUBLICKEY_SIZE and QSC_ECDSA_SECRETKEY_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>publickey</entry><entry>
<para>Pointer to the public verification-key array </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>Pointer to the private signature-key array </para>
</entry>
                            </row>
                            <row>
<entry>seed</entry><entry>
<para>[const] Pointer to the random 32-byte seed array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_ecdsa_8h_1afc4a30cea712bf823fb6f9255cc78651"/><section>
    <title>qsc_ecdsa_sign()</title>
<indexterm><primary>qsc_ecdsa_sign</primary><secondary>ecdsa.h</secondary></indexterm>
<indexterm><primary>ecdsa.h</primary><secondary>qsc_ecdsa_sign</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API void qsc_ecdsa_sign (uint8_t * signedmsg, size_t * smsglen, const uint8_t * message, size_t msglen, const uint8_t * privatekey)</computeroutput></para><para>

<para>Takes the message as input and returns an array containing the signature followed by the message. </para>
</para>

<para><warning><title>Warning</title>

<para>Signature array must be sized to the size of the message plus QSC_ECDSA_SIGNATURE_SIZE.</para>
</warning>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>signedmsg</entry><entry>
<para>Pointer to the signed-message array </para>
</entry>
                            </row>
                            <row>
<entry>smsglen</entry><entry>
<para>[const] Pointer to the signed message length </para>
</entry>
                            </row>
                            <row>
<entry>message</entry><entry>
<para>Pointer to the message array </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>The message length </para>
</entry>
                            </row>
                            <row>
<entry>privatekey</entry><entry>
<para>[const] Pointer to the private signature-key array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_ecdsa_8h_1af695383a08648a04c1ce7d039a3c2e18"/><section>
    <title>qsc_ecdsa_verify()</title>
<indexterm><primary>qsc_ecdsa_verify</primary><secondary>ecdsa.h</secondary></indexterm>
<indexterm><primary>ecdsa.h</primary><secondary>qsc_ecdsa_verify</secondary></indexterm>
<para><computeroutput>QSC_EXPORT_API bool qsc_ecdsa_verify (uint8_t * message, size_t * msglen, const uint8_t * signedmsg, size_t smsglen, const uint8_t * publickey)</computeroutput></para><para>

<para>Verifies a signature-message pair with the public key. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>message</entry><entry>
<para>Pointer to the message array to be signed </para>
</entry>
                            </row>
                            <row>
<entry>msglen</entry><entry>
<para>Pointer to the message length </para>
</entry>
                            </row>
                            <row>
<entry>signedmsg</entry><entry>
<para>[const] Pointer to the signed message array </para>
</entry>
                            </row>
                            <row>
<entry>smsglen</entry><entry>
<para>The signed message length </para>
</entry>
                            </row>
                            <row>
<entry>publickey</entry><entry>
<para>[const] Pointer to the public verification-key array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns true for success </para>
</formalpara>
</para>
</section>
</section>
</section>
