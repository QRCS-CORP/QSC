<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sha2_8h_source" xml:lang="en-US">
<title>sha2.h</title>
<indexterm><primary>C:/Users/stepp/Documents/Visual Studio 2022/Projects/C/QSC/QSC/sha2.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;2025&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation</emphasis>
2 <emphasis role="comment">&#32;*&#32;All&#32;Rights&#32;Reserved.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;NOTICE:&#32;This&#32;software&#32;and&#32;all&#32;accompanying&#32;materials&#32;are&#32;the&#32;exclusive&#32;</emphasis>
5 <emphasis role="comment">&#32;*&#32;property&#32;of&#32;Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;Corporation&#32;(QRCS).</emphasis>
6 <emphasis role="comment">&#32;*&#32;The&#32;intellectual&#32;and&#32;technical&#32;concepts&#32;contained&#32;within&#32;this&#32;implementation&#32;</emphasis>
7 <emphasis role="comment">&#32;*&#32;are&#32;proprietary&#32;to&#32;QRCS&#32;and&#32;its&#32;authorized&#32;licensors&#32;and&#32;are&#32;protected&#32;under&#32;</emphasis>
8 <emphasis role="comment">&#32;*&#32;applicable&#32;U.S.&#32;and&#32;international&#32;copyright,&#32;patent,&#32;and&#32;trade&#32;secret&#32;laws.</emphasis>
9 <emphasis role="comment">&#32;*</emphasis>
10 <emphasis role="comment">&#32;*&#32;CRYPTOGRAPHIC&#32;STANDARDS:</emphasis>
11 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;includes&#32;implementations&#32;of&#32;cryptographic&#32;algorithms&#32;such&#32;as&#32;</emphasis>
12 <emphasis role="comment">&#32;*&#32;&#32;&#32;SHA3,&#32;AES,&#32;and&#32;others.&#32;These&#32;algorithms&#32;are&#32;public&#32;domain&#32;or&#32;standardized&#32;</emphasis>
13 <emphasis role="comment">&#32;*&#32;&#32;&#32;by&#32;organizations&#32;such&#32;as&#32;NIST&#32;and&#32;are&#32;NOT&#32;the&#32;property&#32;of&#32;QRCS.</emphasis>
14 <emphasis role="comment">&#32;*&#32;-&#32;However,&#32;all&#32;source&#32;code,&#32;optimizations,&#32;and&#32;implementations&#32;in&#32;this&#32;library&#32;</emphasis>
15 <emphasis role="comment">&#32;*&#32;&#32;&#32;are&#32;original&#32;works&#32;of&#32;QRCS&#32;and&#32;are&#32;protected&#32;under&#32;this&#32;license.</emphasis>
16 <emphasis role="comment">&#32;*</emphasis>
17 <emphasis role="comment">&#32;*&#32;RESTRICTIONS:</emphasis>
18 <emphasis role="comment">&#32;*&#32;-&#32;Redistribution,&#32;modification,&#32;or&#32;unauthorized&#32;distribution&#32;of&#32;this&#32;software,&#32;</emphasis>
19 <emphasis role="comment">&#32;*&#32;&#32;&#32;in&#32;whole&#32;or&#32;in&#32;part,&#32;is&#32;strictly&#32;prohibited.</emphasis>
20 <emphasis role="comment">&#32;*&#32;-&#32;This&#32;software&#32;is&#32;provided&#32;for&#32;non-commercial,&#32;educational,&#32;and&#32;research&#32;</emphasis>
21 <emphasis role="comment">&#32;*&#32;&#32;&#32;purposes&#32;only.&#32;Commercial&#32;use&#32;in&#32;any&#32;form&#32;is&#32;expressly&#32;forbidden.</emphasis>
22 <emphasis role="comment">&#32;*&#32;-&#32;Licensing&#32;and&#32;authorized&#32;distribution&#32;are&#32;solely&#32;at&#32;the&#32;discretion&#32;of&#32;QRCS.</emphasis>
23 <emphasis role="comment">&#32;*&#32;-&#32;Any&#32;use&#32;of&#32;this&#32;software&#32;implies&#32;acceptance&#32;of&#32;these&#32;restrictions.</emphasis>
24 <emphasis role="comment">&#32;*</emphasis>
25 <emphasis role="comment">&#32;*&#32;DISCLAIMER:</emphasis>
26 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as&#32;is,&quot;&#32;without&#32;warranty&#32;of&#32;any&#32;kind,&#32;express&#32;or&#32;</emphasis>
27 <emphasis role="comment">&#32;*&#32;implied,&#32;including&#32;but&#32;not&#32;limited&#32;to&#32;warranties&#32;of&#32;merchantability&#32;or&#32;fitness&#32;</emphasis>
28 <emphasis role="comment">&#32;*&#32;for&#32;a&#32;particular&#32;purpose.&#32;QRCS&#32;disclaims&#32;all&#32;liability&#32;for&#32;any&#32;direct,&#32;indirect,&#32;</emphasis>
29 <emphasis role="comment">&#32;*&#32;incidental,&#32;or&#32;consequential&#32;damages&#32;resulting&#32;from&#32;the&#32;use&#32;or&#32;misuse&#32;of&#32;this&#32;software.</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;FULL&#32;LICENSE:</emphasis>
32 <emphasis role="comment">&#32;*&#32;This&#32;software&#32;is&#32;subject&#32;to&#32;the&#32;**Quantum&#32;Resistant&#32;Cryptographic&#32;Solutions&#32;</emphasis>
33 <emphasis role="comment">&#32;*&#32;Proprietary&#32;License&#32;(QRCS-PL)**.&#32;The&#32;complete&#32;license&#32;terms&#32;are&#32;included&#32;</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;the&#32;LICENSE.txt&#32;file&#32;distributed&#32;with&#32;this&#32;software.</emphasis>
35 <emphasis role="comment">&#32;*</emphasis>
36 <emphasis role="comment">&#32;*&#32;Written&#32;by:&#32;John&#32;G.&#32;Underhill</emphasis>
37 <emphasis role="comment">&#32;*&#32;Contact:&#32;john.underhill@protonmail.com</emphasis>
38 <emphasis role="comment">&#32;*/</emphasis>
39 
40 
41 <emphasis role="preprocessor">#ifndef&#32;QSC_SHA2_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;QSC_SHA2_H</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
45 
87 
89 <emphasis role="comment">//*&#32;\def&#32;QSC_SHA2_SHANI_ENABLED</emphasis>
90 <emphasis role="comment">//*&#32;\brief&#32;Enables&#32;the&#32;SHA2&#32;permutation&#32;intrinsics.</emphasis>
91 <emphasis role="comment">//*&#32;For&#32;testing&#32;only;&#32;add&#32;this&#32;flag&#32;to&#32;your&#32;preprocessor&#32;definitions&#32;to&#32;enable&#32;SHA-NI&#32;intrinsics.</emphasis>
92 <emphasis role="comment">//*/</emphasis>
93 <emphasis role="preprocessor">#if&#32;!defined(QSC_SHA2_SHANI_ENABLED)</emphasis>
94 <emphasis role="comment">//#&#32;define&#32;QSC_SHA2_SHANI_ENABLED</emphasis>
95 <emphasis role="preprocessor">#endif</emphasis>
96 
101 <emphasis role="preprocessor">#define&#32;QSC_HKDF_256_KEY_SIZE&#32;32</emphasis>
102 
107 <emphasis role="preprocessor">#define&#32;QSC_HKDF_512_KEY_SIZE&#32;64</emphasis>
108 
113 <emphasis role="preprocessor">#define&#32;QSC_HMAC_256_KEY_SIZE&#32;32</emphasis>
114 
119 <emphasis role="preprocessor">#define&#32;QSC_HMAC_512_KEY_SIZE&#32;64</emphasis>
120 
125 <emphasis role="preprocessor">#define&#32;QSC_HMAC_256_MAC_SIZE&#32;32</emphasis>
126 
131 <emphasis role="preprocessor">#define&#32;QSC_HMAC_512_MAC_SIZE&#32;64</emphasis>
132 
137 <emphasis role="preprocessor">#define&#32;QSC_HMAC_256_RATE&#32;64</emphasis>
138 
143 <emphasis role="preprocessor">#define&#32;QSC_HMAC_512_RATE&#32;128</emphasis>
144 
149 <emphasis role="preprocessor">#define&#32;QSC_SHA2_256_HASH_SIZE&#32;32</emphasis>
150 
155 <emphasis role="preprocessor">#define&#32;QSC_SHA2_384_HASH_SIZE&#32;48</emphasis>
156 
161 <emphasis role="preprocessor">#define&#32;QSC_SHA2_512_HASH_SIZE&#32;64</emphasis>
162 
167 <emphasis role="preprocessor">#define&#32;QSC_SHA2_256_RATE&#32;64</emphasis>
168 
173 <emphasis role="preprocessor">#define&#32;QSC_SHA2_384_RATE&#32;128</emphasis>
174 
179 <emphasis role="preprocessor">#define&#32;QSC_SHA2_512_RATE&#32;128</emphasis>
180 
185 <emphasis role="preprocessor">#define&#32;QSC_SHA2_STATE_SIZE&#32;8</emphasis>
186 
187 <emphasis role="comment">/*&#32;SHA2-256&#32;*/</emphasis>
188 
193 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
194 {
195 &#32;&#32;&#32;&#32;uint32_t&#32;<link linkend="_structqsc__sha256__state_1a4c497d73eaf6d58b8b75ded5f9d634ef">state</link>[<link linkend="_sha2_8h_1af98fa11b9259e84c51297c358b51b95e">QSC_SHA2_STATE_SIZE</link>];&#32;&#32;&#32;&#32;
196 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__sha256__state_1ae6610a8e54e74a798f39c658ef3e944c">buffer</link>[<link linkend="_sha2_8h_1a798cb6e28a04637a168d2860c29fb176">QSC_SHA2_256_RATE</link>];&#32;&#32;&#32;&#32;&#32;&#32;
197 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__sha256__state_1a784bc5c3de0f8bc89aca9660ded91ce9">t</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__sha256__state_1a7a04afe5347934be732ec70a70bd0a28">position</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
199 }&#32;<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>;
200 
211 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1aab92d3ba44d23205bbc65c8f0ec3ea6d">qsc_sha256_compute</link>(uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
212 
219 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1ac3632316ad67480584980c8bb38179b7">qsc_sha256_dispose</link>(<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>*&#32;ctx);
220 
233 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a08eaea44310521162ad00d2ee8124b08">qsc_sha256_finalize</link>(<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>*&#32;ctx,&#32;uint8_t*&#32;output);
234 
241 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a50767ebb1872df5f46fd2e9bd4c48519">qsc_sha256_initialize</link>(<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>*&#32;ctx);
242 
251 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1adcd579f4556e90b895b419334a4dea62">qsc_sha256_permute</link>(uint32_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
252 
264 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a529f8a969165e97c245d5d65172cd634">qsc_sha256_update</link>(<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
265 
266 <emphasis role="comment">/*&#32;SHA2-384&#32;*/</emphasis>
267 
272 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
273 {
274 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__sha384__state_1a9199feddac6329e019652f2e0fac9175">state</link>[<link linkend="_sha2_8h_1af98fa11b9259e84c51297c358b51b95e">QSC_SHA2_STATE_SIZE</link>];&#32;&#32;&#32;&#32;
275 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__sha384__state_1a2485b4a96e2159455f9defde68daed6b">t</link>[2];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
276 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__sha384__state_1a10609be8d6813ecb17faebd025bc1ce0">buffer</link>[<link linkend="_sha2_8h_1ad6510c65fbebd47f35a76bf54b0f90a6">QSC_SHA2_384_RATE</link>];&#32;&#32;&#32;&#32;&#32;&#32;
277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__sha384__state_1a7a04afe5347934be732ec70a70bd0a28">position</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
278 }&#32;<link linkend="_structqsc__sha384__state">qsc_sha384_state</link>;
279 
290 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1afcb6ddfdf25b91161060b57e12d0681d">qsc_sha384_compute</link>(uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
291 
298 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a268421256405301a45147f35345e9857">qsc_sha384_dispose</link>(<link linkend="_structqsc__sha384__state">qsc_sha384_state</link>*&#32;ctx);
299 
312 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a2336c915a8d35011f64540857ea8e52f">qsc_sha384_finalize</link>(<link linkend="_structqsc__sha384__state">qsc_sha384_state</link>*&#32;ctx,&#32;uint8_t*&#32;output);
313 
320 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a776de2966e9dd981f4c5a1fe49169bf2">qsc_sha384_initialize</link>(<link linkend="_structqsc__sha384__state">qsc_sha384_state</link>*&#32;ctx);
321 
333 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a10a98e4b5369abe31c2f2940fc16bb1d">qsc_sha384_update</link>(<link linkend="_structqsc__sha384__state">qsc_sha384_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
334 
335 <emphasis role="comment">/*&#32;SHA2-512&#32;*/</emphasis>
336 
341 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
342 {
343 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__sha512__state_1a9199feddac6329e019652f2e0fac9175">state</link>[<link linkend="_sha2_8h_1af98fa11b9259e84c51297c358b51b95e">QSC_SHA2_STATE_SIZE</link>];&#32;&#32;&#32;&#32;
344 &#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_structqsc__sha512__state_1a2485b4a96e2159455f9defde68daed6b">t</link>[2];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
345 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__sha512__state_1ae5074b4d0faa9435312f2216b57fa843">buffer</link>[<link linkend="_sha2_8h_1a54cc35812b0c4ba419b3b5e0dca449a7">QSC_SHA2_512_RATE</link>];&#32;&#32;&#32;&#32;&#32;&#32;
346 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structqsc__sha512__state_1a7a04afe5347934be732ec70a70bd0a28">position</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
347 }&#32;<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>;
348 
359 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a5602305c5a0d7e022c82dfafa25e287f">qsc_sha512_compute</link>(uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
360 
367 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1af75dab61a62cddafe5d4a454c711a417">qsc_sha512_dispose</link>(<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>*&#32;ctx);
368 
381 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1ada5a6439b4305b0e0e41838d1d58f73e">qsc_sha512_finalize</link>(<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>*&#32;ctx,&#32;uint8_t*&#32;output);
382 
389 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a1191b73605a4f0491279babc53990bcc">qsc_sha512_initialize</link>(<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>*&#32;ctx);
390 
399 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1acf8e10cc6b29b94af4989dd5885ed5d5">qsc_sha512_permute</link>(uint64_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;input);
400 
412 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1af0a8d6e0e724c05efc797f3e1f199219">qsc_sha512_update</link>(<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
413 
414 <emphasis role="comment">/*&#32;HMAC-256&#32;*/</emphasis>
415 
420 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
421 {
422 &#32;&#32;&#32;&#32;<link linkend="_structqsc__sha256__state">qsc_sha256_state</link>&#32;<link linkend="_structqsc__hmac256__state_1a27322c7732a5bcf681f318a32a927047">pstate</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
423 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__hmac256__state_1a5d42589d5254ba0996ae91a106d0f356">ipad</link>[<link linkend="_sha2_8h_1a798cb6e28a04637a168d2860c29fb176">QSC_SHA2_256_RATE</link>];&#32;&#32;&#32;&#32;
424 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__hmac256__state_1aa78b77f3f6393366f3da5c6871e30b20">opad</link>[<link linkend="_sha2_8h_1a798cb6e28a04637a168d2860c29fb176">QSC_SHA2_256_RATE</link>];&#32;&#32;&#32;&#32;
425 }&#32;<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>;
426 
439 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a91d83a0e076585a28b9d18268b3ca993">qsc_hmac256_compute</link>(uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen);
440 
447 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1ad19d81e418c12695bc6475f8fa41a87f">qsc_hmac256_dispose</link>(<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>*&#32;ctx);
448 
461 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a757cf2ba8342c295b97c11f60507bec8">qsc_hmac256_finalize</link>(<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>*&#32;ctx,&#32;uint8_t*&#32;output);
462 
471 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a29f09894b361edc0e623308daea5dbbb">qsc_hmac256_initialize</link>(<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen);
472 
483 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a6a46975b7c8e19883cac85e409432881">qsc_hmac256_update</link>(<link linkend="_structqsc__hmac256__state">qsc_hmac256_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
484 
485 <emphasis role="comment">/*&#32;HMAC-512&#32;*/</emphasis>
486 
491 QSC_EXPORT_API&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
492 {
493 &#32;&#32;&#32;&#32;<link linkend="_structqsc__sha512__state">qsc_sha512_state</link>&#32;<link linkend="_structqsc__hmac512__state_1aede2b2af366378b78ab5c1032d298db4">pstate</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
494 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__hmac512__state_1a84f181fb9ffb0c8b49b89a284281058b">ipad</link>[<link linkend="_sha2_8h_1a54cc35812b0c4ba419b3b5e0dca449a7">QSC_SHA2_512_RATE</link>];&#32;&#32;&#32;&#32;
495 &#32;&#32;&#32;&#32;uint8_t&#32;<link linkend="_structqsc__hmac512__state_1a765e063c1996e0e4c98a27c8bfcda666">opad</link>[<link linkend="_sha2_8h_1a54cc35812b0c4ba419b3b5e0dca449a7">QSC_SHA2_512_RATE</link>];&#32;&#32;&#32;&#32;
496 }&#32;<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link>;
497 
510 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1ae945ecc86192bedb2a51258404376d6f">qsc_hmac512_compute</link>(uint8_t*&#32;output,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen);
511 
520 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a5b7bed29f22b348a96a7f88b27bda597">qsc_hmac512_dispose</link>(<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link>*&#32;ctx);
521 
534 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a77dae801c5a93ee3486c07a7a6f085ac">qsc_hmac512_finalize</link>(<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link>*&#32;ctx,&#32;uint8_t*&#32;output);
535 
544 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a82019377eb632c58b1b4b222d1c3a075">qsc_hmac512_initialize</link>(<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen);
545 
556 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a2d0b2707561bc1405cecc11104c030af">qsc_hmac512_update</link>(<link linkend="_structqsc__hmac512__state">qsc_hmac512_state</link>*&#32;ctx,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;message,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;msglen);
557 
558 <emphasis role="comment">/*&#32;HKDF&#32;*/</emphasis>
559 
571 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a92dda9601e71e335d76f9e63e9709717">qsc_hkdf256_expand</link>(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;info,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;infolen);
572 
583 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a1af5af2b784ff891f154b9d78d743021">qsc_hkdf256_extract</link>(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;salt,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;saltlen);
584 
596 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a99d9483d6a75e2cdaf69cdf6592d09df">qsc_hkdf512_expand</link>(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;info,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;infolen);
597 
608 QSC_EXPORT_API&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_sha2_8h_1a4a3f2811a273c2d7fc797de97e9e009d">qsc_hkdf512_extract</link>(uint8_t*&#32;output,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;otplen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;key,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;keylen,&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t*&#32;salt,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;saltlen);
609 
610 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
